*  COMPLETION

**   [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

    + REQUIRES:
        *  [[https://github.com/hrsh7th/cmp-nvim-lsp][cmp-nvim-lsp]]
        *  [[https://github.com/saadparwaiz1/cmp_luasnip][cmp_luasnip]]
        *  [[https://github.com/hrsh7th/cmp-buffer][cmp-buffer]]
        *  [[https://github.com/hrsh7th/cmp-path][cmp-path]]
        *  [[https://github.com/kdheepak/cmp-latex-symbols][cmp-latex-symbols]]

    + INIT

    #+begin_src lua
    modules["hrsh7th/nvim-cmp"] = {
        commit = funcs.get_commit("nvim-cmp", plugins_snapshot),
        requires = {
            "hrsh7th/cmp-nvim-lsp",
            commit = funcs.get_commit("cmp-nvim-lsp", plugins_snapshot),
            {
                "saadparwaiz1/cmp_luasnip",
                commit = funcs.get_commit("cmp_luasnip", plugins_snapshot),
                after = "nvim-cmp",
            },
            {
                "hrsh7th/cmp-buffer",
                commit = funcs.get_commit("cmp-buffer", plugins_snapshot),
                after = "nvim-cmp",
            },
            {
                "hrsh7th/cmp-path",
                commit = funcs.get_commit("cmp-path", plugins_snapshot),
                after = "nvim-cmp",
            },
            {
                "kdheepak/cmp-latex-symbols",
                commit = funcs.get_commit("cmp-latex-symbols", plugins_snapshot),
                after = "nvim-cmp",
            },
        },
        event = {
            "BufRead",
            "InsertEnter",
        },
        config = completion_config.nvim_cmp,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_cmp()
        local cmp_status_ok, cmp = pcall(require, "cmp")
        if not cmp_status_ok then
            return
        end
        local snip_status_ok, luasnip = pcall(require, "luasnip")
        if not snip_status_ok then
            return
        end
        require("luasnip.loaders.from_vscode").lazy_load()
        local check_backspace = function()
            local line, col = unpack(vim.api.nvim_win_get_cursor(0))
            return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
        end
        local lsp_symbols = {
            Text = "   (Text) ",
            Method = "   (Method)",
            Function = "   (Function)",
            Constructor = "   (Constructor)",
            Field = " ﴲ  (Field)",
            Variable = "[] (Variable)",
            Class = "   (Class)",
            Interface = " ﰮ  (Interface)",
            Module = "   (Module)",
            Property = " 襁 (Property)",
            Unit = "   (Unit)",
            Value = "   (Value)",
            Enum = " 練 (Enum)",
            Keyword = "   (Keyword)",
            Snippet = "   (Snippet)",
            Color = "   (Color)",
            File = "   (File)",
            Reference = "   (Reference)",
            Folder = "   (Folder)",
            EnumMember = "   (EnumMember)",
            Constant = "   (Constant)",
            Struct = "   (Struct)",
            Event = "   (Event)",
            Operator = "   (Operator)",
            TypeParameter = "   (TypeParameter)",
        }
        cmp.setup({
            snippet = {
                expand = function(args)
                    luasnip.lsp_expand(args.body)
                end,
            },
            mapping = {
                ["<C-p>"] = cmp.mapping.select_prev_item(),
                ["<C-n>"] = cmp.mapping.select_next_item(),
                ["<C-d>"] = cmp.mapping.scroll_docs(-4),
                ["<C-f>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.close(),
                ["<CR>"] = cmp.mapping.confirm({
                    behavior = cmp.ConfirmBehavior.Replace,
                    select = true,
                }),
                ["<Tab>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_next_item()
                    elseif luasnip.expandable() then
                        luasnip.expand()
                    elseif luasnip.expand_or_jumpable() then
                        luasnip.expand_or_jump()
                    elseif check_backspace() then
                        fallback()
                    else
                        fallback()
                    end
                end, { "i", "s" }),
                ["<S-Tab>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_prev_item()
                    elseif luasnip.jumpable(-1) then
                        luasnip.jump(-1)
                    else
                        fallback()
                    end
                end, { "i", "s" }),
            },
            formatting = {
                format = function(entry, item)
                    item.kind = lsp_symbols[item.kind]
                    item.menu = ({
                        nvim_lsp = "[LSP]",
                        luasnip = "[Snippet]",
                        buffer = "[Buffer]",
                        path = "[Path]",
                        crates = "[Crates]",
                        latex_symbols = "[LaTex]",
                    })[entry.source.name]
                    return item
                end,
            },
            sources = {
                {
                    name = "nvim_lsp",
                },
                {
                    name = "luasnip",
                },
                {
                    name = "buffer",
                },
                {
                    name = "path",
                },
                {
                    name = "crates",
                },
                {
                    name = "latex_symbols",
                },
                {
                    name = "orgmode",
                },
            },
        })
    end
    #+end_src

**   [[https://github.com/L3MON4D3/LuaSnip][LuaSnip]]

    + REQUIRES:
        *  [[https://github.com/rafamadriz/friendly-snippets][friendly-snippets]]

    + INIT

    #+begin_src lua
    modules["L3MON4D3/LuaSnip"] = {
        commit = funcs.get_commit("LuaSnip", plugins_snapshot),
        requires = {
            "rafamadriz/friendly-snippets",
            commit = funcs.get_commit("friendly-snippets", plugins_snapshot),
            after = "LuaSnip",
        },
    }
    #+end_src

**   [[https://github.com/Neevash/awesome-flutter-snippets][awesome-flutter-snippets]]

    + INIT

    #+begin_src lua
    modules["Neevash/awesome-flutter-snippets"] = {
        commit = funcs.get_commit("awesome-flutter-snippets", plugins_snapshot),
        ft = "dart",
    }
    #+end_src

**   [[https://github.com/windwp/nvim-autopairs][nvim-autopairs]]

    + REQUIRES:
        *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]
        *  [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

    + INIT

    #+begin_src lua
    modules["windwp/nvim-autopairs"] = {
        commit = funcs.get_commit("nvim-autopairs", plugins_snapshot),
        requires = {
            {
                "nvim-treesitter/nvim-treesitter",
                commit = funcs.get_commit("nvim-treesitter", plugins_snapshot),
            },
            {
                "hrsh7th/nvim-cmp",
                commit = funcs.get_commit("nvim-cmp", plugins_snapshot),
            },
        },
        after = {
            "nvim-treesitter",
            "nvim-cmp",
        },
        config = completion_config.nvim_autopairs,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_autopairs()
        local nvim_autopairs_status_ok, nvim_autopairs = pcall(require, "nvim-autopairs")
        if not nvim_autopairs_status_ok then
            return
        end
        local rule_status_ok, rule = pcall(require, "nvim-autopairs.rule")
        if not rule_status_ok then
            return
        end
        local conds_status_ok, conds = pcall(require, "nvim-autopairs.conds")
        if not conds_status_ok then
            return
        end
        nvim_autopairs.setup({
            check_ts = true,
            ts_config = {
                lua = {
                    "string",
                },
                javascript = {
                    "template_string",
                },
                java = false,
            },
        })
        nvim_autopairs.add_rule(rule("$$", "$$", "tex"))
        nvim_autopairs.add_rules({
            rule("$", "$", { "tex", "latex" })
                :with_pair(conds.not_after_regex_check("%%"))
                :with_pair(conds.not_before_regex_check("xxx", 3))
                :with_move(conds.none())
                :with_del(conds.not_after_regex_check("xx"))
                :with_cr(conds.none()),
        })
        nvim_autopairs.add_rules({
            rule("$$", "$$", "tex"):with_pair(function(opts)
                print(vim.inspect(opts))
                if opts.line == "aa $$" then
                    return false
                end
            end),
        })
        local ts_conds_status_ok, ts_conds = pcall(require, "nvim-autopairs.ts-conds")
        if not ts_conds_status_ok then
            return
        end
        nvim_autopairs.add_rules({
            rule("%", "%", "lua"):with_pair(ts_conds.is_ts_node({ "string", "comment" })),
            rule("$", "$", "lua"):with_pair(ts_conds.is_not_ts_node({ "function" })),
        })
    end
    #+end_src

**   [[https://github.com/windwp/nvim-ts-autotag][nvim-ts-autotag]]

    + REQUIRES:
        *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]
        *  [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

    + INIT

    #+begin_src lua
    modules["windwp/nvim-ts-autotag"] = {
        commit = funcs.get_commit("nvim-ts-autotag", plugins_snapshot),
        requires = {
            {
                "nvim-treesitter/nvim-treesitter",
                commit = funcs.get_commit("nvim-treesitter", plugins_snapshot),
            },
            {
                "hrsh7th/nvim-cmp",
                commit = funcs.get_commit("nvim-cmp", plugins_snapshot),
            },
        },
        config = completion_config.nvim_ts_autotag,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_ts_autotag()
        local nvim_ts_autotag_status_ok, nvim_ts_autotag = pcall(require, "nvim-ts-autotag")
        if not nvim_ts_autotag_status_ok then
            return
        end
        nvim_ts_autotag.setup()
    end
    #+end_src

**   [[https://github.com/kylechui/nvim-surround][nvim-surround]]

    + REQUIRES:
        *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]

    + INIT

    #+begin_src lua
    modules["kylechui/nvim-surround"] = {
        commit = funcs.get_commit("nvim-surround", plugins_snapshot),
        requires = {
            "nvim-treesitter/nvim-treesitter",
            commit = funcs.get_commit("nvim-treesitter", plugins_snapshot),
        },
        after = "nvim-treesitter",
        config = completion_config.nvim_surround,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_surround()
        local nvim_surround_status_ok, nvim_surround = pcall(require, "nvim-surround")
        if not nvim_surround_status_ok then
            return
        end
        nvim_surround.setup()
    end
    #+end_src
