*  VERSION CONTROL

**   [[https://github.com/TimUntersberger/neogit][neogit]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["TimUntersberger/neogit"] = {
        commit = funcs.get_commit("neogit", plugins_snapshot),
        requires = {
            "nvim-lua/plenary.nvim",
            commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
        },
        cmd = "Neogit",
        config = version_control_config.neogit,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.neogit()
        local neogit_status_ok, neogit = pcall(require, "neogit")
        if not neogit_status_ok then
            return
        end
        neogit.setup({
            disable_signs = false,
            disable_context_highlighting = false,
            disable_commit_confirmation = false,
            signs = {
                section = {
                    "",
                    "",
                },
                item = {
                    "",
                    "",
                },
                hunk = {
                    "",
                    "",
                },
            },
            integrations = {
                diffview = true,
            },
        })
    end
    #+end_src

**   [[https://github.com/sindrets/lewis6991/gitsigns.nvim][gitsigns.nvim]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["lewis6991/gitsigns.nvim"] = {
        commit = funcs.get_commit("gitsigns.nvim", plugins_snapshot),
        requires = {
            "nvim-lua/plenary.nvim",
            commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
        },
        event = {
            "BufRead",
        },
        config = version_control_config.gitsigns_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.gitsigns_nvim()
        local gitsigns_status_ok, gitsigns = pcall(require, "gitsigns")
        if not gitsigns_status_ok then
            return
        end
        gitsigns.setup({
            signs = {
                add = {
                    hl = "GitSignsAdd",
                    text = " ▎",
                    numhl = "GitSignsAddNr",
                    linehl = "GitSignsAddLn",
                },
                change = {
                    hl = "GitSignsChange",
                    text = " ▎",
                    numhl = "GitSignsChangeNr",
                    linehl = "GitSignsChangeLn",
                },
                delete = {
                    hl = "GitSignsDelete",
                    text = " ▎",
                    numhl = "GitSignsDeleteNr",
                    linehl = "GitSignsDeleteLn",
                },
                topdelete = {
                    hl = "GitSignsDelete",
                    text = " ▎",
                    numhl = "GitSignsDeleteNr",
                    linehl = "GitSignsDeleteLn",
                },
                changedelete = {
                    hl = "GitSignsChange",
                    text = " ▎",
                    numhl = "GitSignsChangeNr",
                    linehl = "GitSignsChangeLn",
                },
            },
            numhl = false,
            linehl = false,
            keymaps = {
                noremap = true,
                buffer = true,
            },
        })
        vim.api.nvim_create_user_command("GitSignsPreviewHunk", "lua require('gitsigns').preview_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsNextHunk", "lua require('gitsigns').next_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsPrevHunk", "lua require('gitsigns').prev_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsStageHunk", "lua require('gitsigns').stage_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsUndoStageHunk", "lua require('gitsigns').undo_stage_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsResetHunk", "lua require('gitsigns').reset_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsResetBuffer", "lua require('gitsigns').reset_buffer()", {})
        vim.api.nvim_create_user_command("GitSignsBlameLine", "lua require('gitsigns').blame_line()", {})
        vim.keymap.set("n", "<A-]>", function()
            vim.cmd("GitSignsNextHunk")
        end, { noremap = true, silent = true, desc = "GitSignsNextHunk" })
        vim.keymap.set("n", "<A-[>", function()
            vim.cmd("GitSignsPrevHunk")
        end, { noremap = true, silent = true, desc = "GitSignsPrevHunk" })
        vim.keymap.set("n", "<A-;>", function()
            vim.cmd("GitSignsPreviewHunk")
        end, { noremap = true, silent = true, desc = "GitSignsPreviewHunk" })
    end
    #+end_src

**   [[https://github.com/f-person/git-blame.nvim][git-blame.nvim]]

    + INIT

    #+begin_src lua
    modules["f-person/git-blame.nvim"] = {
        commit = funcs.get_commit("git-blame.nvim", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = version_control_config.git_blame_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.git_blame_nvim()
        vim.g.gitblame_ignored_filetypes = {
            "help",
            "Outline",
            "git",
            "dapui_scopes",
            "dapui_breakpoints",
            "dapui_stacks",
            "dapui_watches",
            "NeogitStatus",
            "dashboard",
        }
        vim.keymap.set("n", "<C-c>b", function()
            vim.cmd("GitBlameToggle")
        end, { noremap = true, silent = true, desc = "GitBlameToggle" })
    end
    #+end_src

**   [[https://github.com/sindrets/diffview.nvim][diffview.nvim]]

    + INIT

    #+begin_src lua
    modules["sindrets/diffview.nvim"] = {
        commit = funcs.get_commit("diffview.nvim", plugins_snapshot),
        after = "lvim-colorscheme",
        config = version_control_config.diffview_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.diffview_nvim()
        local diffview_status_ok, diffview = pcall(require, "diffview")
        if not diffview_status_ok then
            return
        end
        diffview.setup({
            hooks = {
                diff_buf_read = function()
                    vim.opt_local.wrap = false
                    vim.opt_local.list = false
                    vim.opt_local.relativenumber = false
                    vim.opt_local.cursorcolumn = false
                    vim.opt_local.colorcolumn = "0"
                end,
            },
        })
    end
    #+end_src

**   [[https://github.com/pwntester/octo.nvim][pwntester/octo.nvim]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]
        *  [[https://github.com/nvim-telescope/telescope.nvim][telescope.nvim]]
        *  [[https://github.com/nvim-tree/nvim-web-devicons][nvim-web-devicons]]

    + INIT

    #+begin_src lua
    modules["pwntester/octo.nvim"] = {
        commit = funcs.get_commit("octo.nvim", plugins_snapshot),
        after = "lvim-colorscheme",
        requires = {
            {
                "nvim-lua/plenary.nvim",
                commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
            },
            {
                "nvim-telescope/telescope.nvim",
                commit = funcs.get_commit("telescope.nvim", plugins_snapshot),
            },
            {
                "nvim-tree/nvim-web-devicons",
                commit = funcs.get_commit("nvim-web-devicons", plugins_snapshot),
            },
        },
        config = version_control_config.octo_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.octo_nvim()
        local octo_status_ok, octo = pcall(require, "octo")
        if not octo_status_ok then
            return
        end
        octo.setup()
    end
    #+end_src

**   [[https://github.com/mbbill/undotree][undotree]]

    + INIT

    #+begin_src lua
    modules["mbbill/undotree"] = {
        commit = funcs.get_commit("undotree", plugins_snapshot),
        event = {
            "BufRead",
        },
        cmd = "UndotreeToggle",
        config = version_control_config.undotree,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.undotree()
        vim.keymap.set("n", "<F5>", function()
            vim.cmd("UndotreeToggle")
        end, { noremap = true, silent = true, desc = "UndotreeToggle" })
    end
    #+end_src
