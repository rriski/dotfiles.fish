*  LVIM IDE

  [[./media/lvim-ide-logo.png]]

  LVIM IDE is a modular Neovim configuration written in LUA with full customization

  Current version - 2.0.60 (2022-08-30)

  Startup time: 092.314 (104 plugins)

**  SCREENSHOTS

  [[./media/lvim-ide-screenshot_01.png]]

  [[./media/lvim-ide-screenshot_02.png]]

  [[./media/lvim-ide-screenshot_03.png]]

  [[./media/lvim-ide-screenshot_04.png]]

  [[./media/lvim-ide-screenshot_05.png]]

  [[./media/lvim-ide-screenshot_06.png]]

  [[./media/lvim-ide-screenshot_07.png]]

  [[./media/lvim-ide-screenshot_08.png]]

  [[./media/lvim-ide-screenshot_09.png]]

  [[./media/lvim-ide-screenshot_10.png]]

  [[./media/lvim-ide-screenshot_11.png]]

  [[./media/lvim-ide-screenshot_12.png]]

  [[./media/lvim-ide-screenshot_13.png]]

  [[./media/lvim-ide-screenshot_14.png]]

  [[./media/lvim-ide-screenshot_15.png]]

  [[./media/lvim-ide-screenshot_16.png]]

  [[./media/lvim-ide-screenshot_17.png]]
**  INTRODUCTION

    * Neovim 0.7.0+
    * Add or remove plugins, rewrite all plugins
    * Add or remove settings, rewrite all settings
    * Dynamic LSP activation
    * Dynamic debugging activation - DAP
    * Autoinstall the LSP servers, DAP servers, linters, and formatters
    * Custom settings for projects

    For keybindings - press F11

**  REQUIREMENTS

    * [[https://github.com/neovim/neovim/wiki/Installing-Neovim][neovim >= 0.7.0]]
    * [[https://github.com/neovim/pynvim][pynvim]]
    * [[https://github.com/mhinz/neovim-remote][neovim-remote]]
    * [[https://nodejs.org/en/][nodejs]]
    * [[https://github.com/BurntSushi/ripgrep][ripgrep]]
    * sed
    * [[https://github.com/junegunn/fzf][fzf]]
    * [[https://github.com/WayneD/rsync][rsync]]
    * [[https://github.com/jesseduffield/lazygit][lazygit]]
    * [[https://github.com/gleitz/howdoi][howdoi]]
    * [[https://github.com/htacg/tidy-html5][tidy-html5]]
    * [[https://git-scm.com/][git]]
    * [[https://curl.se/][curl]] or [[https://www.gnu.org/software/wget/][wget]]
    * unzip, tar, gzip

**  INSTALL

    #+begin_src bash

    git clone https://github.com/lvim-tech/lvim.git ~/.config/nvim

    #+end_src

**  COMPONENTS

***  CORE

****  FILE STRUCTURE

    #+begin_src bash

    core
    ├── funcs.lua
    ├── global.lua
    ├── init.lua
    └── pack.lua

    0 directories, 4 files

    #+end_src


***  CONFIGS

****  FILE STRUCTURE

    #+begin_src bash

    configs
    ├── base
    │   ├── init.lua
    │   ├── keymaps.lua
    │   └── options.lua
    └── user
        ├── init.lua
        ├── keymaps.lua
        └── options.lua

    2 directories, 6 files

    #+end_src

***  MODULES

****  FILE STRUCTURE

    #+begin_src bash

    modules
    ├── base
    │   ├── configs
    │   │   ├── completion
    │   │   │   └── init.lua
    │   │   ├── editor
    │   │   │   └── init.lua
    │   │   ├── languages
    │   │   │   └── init.lua
    │   │   ├── ui
    │   │   │   ├── init.lua
    │   │   │   └── utils
    │   │   │       ├── input.lua
    │   │   │       └── select.lua
    │   │   └── version_control
    │   │       └── init.lua
    │   └── init.lua
    └── user
        ├── configs
        │   ├── completion
        │   │   └── init.lua
        │   ├── editor
        │   │   └── init.lua
        │   ├── languages
        │   │   └── init.lua
        │   ├── ui
        │   │   └── init.lua
        │   └── version_control
        │       └── init.lua
        └── init.lua

    15 directories, 14 files

    #+end_src

****  PLUGINS

*****  UTILS

******   [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["nvim-lua/plenary.nvim"] = {}

    #+end_src

******   [[https://github.com/lewis6991/impatient.nvim][impatient.nvim]]

        + INIT

    #+begin_src lua

    modules["lewis6991/impatient.nvim"] = {}

    #+end_src

*****  UI

******   [[https://github.com/lvim-tech/lvim-colorscheme][lvim-colorscheme]]

        + INIT

    #+begin_src lua

    modules["lvim-tech/lvim-colorscheme"] = {
        config = ui_config.lvim_colorscheme,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.lvim_colorscheme()
        vim.g.lvim_sidebars = { "qf", "Outline", "terminal", "packer", "calendar", "spectre_panel", "ctrlspace" }
        vim.cmd("colorscheme lvim")
    end

    #+end_src

******   [[https://github.com/nvim-lua/popup.nvim][popup.nvim]]

        + INIT

    #+begin_src lua

    modules["nvim-lua/popup.nvim"] = {}

    #+end_src

******   [[https://github.com/MunifTanjim/nui.nvim][nui.nvim]]

        + INIT

    #+begin_src lua

    modules["MunifTanjim/nui.nvim"] = {
        config = ui_config.nui_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nui_nvim()
        vim.ui.input = require("modules.base.configs.ui.utils.input")
        vim.ui.select = require("modules.base.configs.ui.utils.select")
    end

    #+end_src

******   [[https://github.com/goolord/alpha-nvim][alpha-nvim]]

        + INIT

    #+begin_src lua

    modules["goolord/alpha-nvim"] = {
        event = "VimEnter",
        config = ui_config.alpha_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.alpha_nvim()
        local dashboard = require("alpha.themes.dashboard")
        math.randomseed(os.time())

        local function button(sc, txt, keybind, keybind_opts)
            local b = dashboard.button(sc, txt, keybind, keybind_opts)
            b.opts.hl = "AlphaButton"
            b.opts.hl_shortcut = "AlphaButtonShortcut"
            return b
        end

        local function footer()
            local global = require("core.global")
            local plugins = #vim.tbl_keys(packer_plugins)
            local v = vim.version()
            local datetime = os.date(" %d-%m-%Y   %H:%M:%S")
            local platform
            if global.os == "Linux" then
                platform = " Linux"
            elseif global.os == "macOS" then
                platform = " macOS"
            else
                platform = ""
            end
            return string.format("  %d   v%d.%d.%d  %s  %s", plugins, v.major, v.minor, v.patch, platform, datetime)
        end

        dashboard.section.header.val = {
            " 888     Y88b      / 888      e    e      ",
            " 888      Y88b    /  888     d8b  d8b     ",
            " 888       Y88b  /   888    d888bdY88b    ",
            " 888        Y888/    888   / Y88Y Y888b   ",
            " 888         Y8/     888  /   YY   Y888b  ",
            " 888____      Y      888 /          Y888b ",
        }
        dashboard.section.header.opts.hl = "AlphaHeader"
        dashboard.section.buttons.val = {
            button("SPC SPC b", "  Projects", ":CtrlSpace b<CR>"),
            button("A-/", "  File explorer", ":Telescope file_browser<CR>"),
            button("A-,", "  Search file", ":Telescope find_files<CR>"),
            button("A-.", "  Search in files", ":Telescope live_grep<CR>"),
            button("F11", "  Help", ":LvimHelper<CR>"),
            button("q", "  Quit", "<Cmd>qa<CR>"),
        }
        dashboard.section.footer.val = footer()
        dashboard.section.footer.opts.hl = "AlphaFooter"
        table.insert(dashboard.config.layout, { type = "padding", val = 1 })
        table.insert(dashboard.config.layout, {
            type = "text",
            val = require("alpha.fortune")(),
            opts = {
                position = "center",
                hl = "AlphaQuote",
            },
        })
        require("alpha").setup(dashboard.config)
        vim.api.nvim_create_augroup("alpha_tabline", { clear = true })
        vim.api.nvim_create_autocmd("FileType", {
            group = "alpha_tabline",
            pattern = "alpha",
            command = "set showtabline=0 laststatus=0 noruler",
        })
        vim.api.nvim_create_autocmd("FileType", {
            group = "alpha_tabline",
            pattern = "alpha",
            callback = function()
                vim.api.nvim_create_autocmd("BufUnload", {
                    group = "alpha_tabline",
                    buffer = 0,
                    command = "set showtabline=2 ruler laststatus=3",
                })
            end,
        })
    end

    #+end_src

******   [[https://github.com/s1n7ax/nvim-window-picker][nvim-window-picker]]

        + REQUIRES:
          *  [[https://github.com/kyazdani42/nvim-web-devicons][nvim-web-devicons]]

        + INIT

    #+begin_src lua

    modules["s1n7ax/nvim-window-picker"] = {
        config = ui_config.nvim_window_picker,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_window_picker()
        local window_picker = require("window-picker")
        local filters = window_picker.filter_windows
        local function special_autoselect(windows)
            windows = filters(windows)
            if #windows > 1 then
                return windows
            end
            local curr_win = vim.api.nvim_get_current_win()
            for index, window in ipairs(windows) do
                if window == curr_win then
                    table.remove(windows, index)
                end
            end
            return windows
        end

        local function focus_window()
            local window = require("window-picker").pick_window()
            if type(window) == "number" then
                vim.api.nvim_set_current_win(window)
            end
        end

        require("window-picker").setup({
            autoselect_one = false,
            include_current_win = true,
            filter_func = special_autoselect,
            filter_rules = {
                bo = {
                    filetype = {},
                    buftype = {},
                },
            },
            fg_color = "#20262A",
            current_win_hl_color = "#20262A",
            other_win_hl_color = "#95b365",
        })
        vim.api.nvim_create_user_command("WindowPicker", focus_window, {})
    end

    #+end_src

******   [[https://github.com/nvim-neo-tree/neo-tree.nvim][neo-tree.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]
          *  [[https://github.com/kyazdani42/nvim-web-devicons][nvim-web-devicons]]
          *  [[https://github.com/MunifTanjim/nui.nvim][nui.nvim]]

        + INIT

    #+begin_src lua

    modules["nvim-neo-tree/neo-tree.nvim"] = {
        branch = "v2.x",
        requires = {
            "nvim-lua/plenary.nvim",
            "kyazdani42/nvim-web-devicons",
            "MunifTanjim/nui.nvim",
            {
                "mrbjarksen/neo-tree-diagnostics.nvim",
                module = "neo-tree.sources.diagnostics",
            },
        },
        config = ui_config.neo_tree_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.neo_tree_nvim()
        require("neo-tree").setup({
            use_popups_for_input = false,
            enable_diagnostics = false,
            sources = {
                "filesystem",
                "buffers",
                "git_status",
                "diagnostics",
            },
            default_component_configs = {
                container = {
                    enable_character_fade = true,
                },
                indent = {
                    with_markers = false,
                    with_expanders = true,
                },
                icon = {
                    folder_closed = "",
                    folder_open = "",
                    folder_empty = "",
                    highlight = "NeoTreeFileIcon",
                },
                modified = {
                    symbol = "",
                },
                git_status = {
                    symbols = {
                        added = "",
                        deleted = "",
                        modified = "",
                        renamed = "",
                        untracked = "",
                        ignored = "",
                        unstaged = "",
                        staged = "",
                        conflict = "",
                    },
                    align = "right",
                },
            },
            window = {
                mappings = {
                    ["Z"] = "expand_all_nodes",
                },
            },
            filesystem = {
                follow_current_file = true,
            },
        })
    end

    #+end_src

******   [[https://github.com/elihunter173/dirbuf.nvim][dirbuf.nvim]]

        + INIT

    #+begin_src lua

    modules["elihunter173/dirbuf.nvim"] = {
        cmd = "Dirbuf",
        config = ui_config.dirbuf_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.dirbuf_nvim()
        require("dirbuf").setup()
    end

    #+end_src

*********   [[https://github.com/folke/which-key.nvim][which-key.nvim]]

           + INIT

    #+begin_src lua

    modules["folke/which-key.nvim"] = {
        event = "BufWinEnter",
        config = ui_config.which_key_nvim,
    }

    #+end_src

           + CONFIG

    #+begin_src lua

    function config.which_key_nvim()
        local options = {
            plugins = {
                marks = true,
                registers = true,
                presets = {
                    operators = false,
                    motions = false,
                    text_objects = false,
                    windows = false,
                    nav = false,
                    z = false,
                    g = false,
                },
                spelling = {
                    enabled = true,
                    suggestions = 20,
                },
            },
            icons = {
                breadcrumb = "»",
                separator = "➜",
                group = "+",
            },
            window = {
                border = "single",
                position = "bottom",
                margin = {
                    0,
                    0,
                    0,
                    0,
                },
                padding = {
                    2,
                    2,
                    2,
                    2,
                },
            },
            layout = {
                height = {
                    min = 4,
                    max = 25,
                },
                width = {
                    min = 20,
                    max = 50,
                },
                spacing = 10,
            },
            hidden = { "<silent>", "<cmd>", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " },
            show_help = true,
            buftype = "",
        }
        local nopts = {
            mode = "n",
            prefix = "<leader>",
            buffer = nil,
            silent = true,
            noremap = true,
            nowait = true,
        }
        local vopts = {
            mode = "v",
            prefix = "<leader>",
            buffer = nil,
            silent = true,
            noremap = true,
            nowait = true,
        }
        local nmappings = {
            a = { ":e $HOME/.config/nvim/README.org<CR>", "Open README file" },
            e = { "<Cmd>NvimTreeToggle<CR>", "NvimTree toggle" },
            b = {
                name = "Buffers",
                n = { "<Cmd>BufSurfForward<CR>", "Next buffer" },
                p = { "<Cmd>BufSurfBack<CR>", "Prev buffer" },
                l = { "<Cmd>Telescope buffers<CR>", "List buffers" },
            },
            d = {
                name = "Database",
                u = { "<Cmd>DBUIToggle<CR>", "DB UI toggle" },
                f = { "<Cmd>DBUIFindBuffer<CR>", "DB find buffer" },
                r = { "<Cmd>DBUIRenameBuffer<CR>", "DB rename buffer" },
                l = { "<Cmd>DBUILastQueryInfo<CR>", "DB last query" },
            },
            p = {
                name = "Packer",
                c = { "<cmd>PackerCompile<CR>", "Compile" },
                i = { "<cmd>PackerInstall<CR>", "Install" },
                s = { "<cmd>PackerSync<CR>", "Sync" },
                S = { "<cmd>PackerStatus<CR>", "Status" },
                u = { "<cmd>PackerUpdate<CR>", "Update" },
            },
            P = {
                name = "Path",
                g = { "<Cmd>SetGlobalPath<CR>", "Set global path" },
                w = { "<Cmd>SetWindowPath<CR>", "Set window path" },
            },
            l = {
                name = "LSP",
                r = { "<Cmd>LspRename<CR>", "Rename" },
                f = { "<Cmd>LspFormatting<CR>", "Format" },
                h = { "<Cmd>Hover<CR>", "Hover" },
                a = { "<Cmd>LspCodeAction<CR>", "Code action" },
                d = { "<Cmd>LspDefinition<CR>", "Definition" },
                t = { "<Cmd>LspTypeDefinition<CR>", "Type definition" },
                R = { "<Cmd>LspReferences<CR>", "References" },
                i = { "<Cmd>LspImplementation<CR>", "Implementation" },
                s = { "<Cmd>LspSignatureHelp<CR>", "Signature help" },
                S = {
                    name = "Symbol",
                    d = { "<Cmd>LspDocumentSymbol<CR>", "Document symbol" },
                    w = { "<Cmd>LspWorkspaceSymbol<CR>", "Workspace symbol" },
                },
                w = {
                    "<Cmd>LspAddToWorkspaceFolder<CR>",
                    "Add to workspace folder",
                },
            },
            g = {
                name = "GIT",
                b = { "<Cmd>GitSignsBlameLine<CR>", "Blame" },
                ["]"] = { "<Cmd>GitSignsNextHunk<CR>", "Next hunk" },
                ["["] = { "<Cmd>GitSignsPrevHunk<CR>", "Prev hunk" },
                P = { "<Cmd>GitSignsPreviewHunk<CR>", "Preview hunk" },
                r = { "<Cmd>GitSignsResetHunk<CR>", "Reset stage hunk" },
                s = { "<Cmd>GitSignsStageHunk<CR>", "Stage hunk" },
                u = { "<Cmd>GitSignsUndoStageHunk<CR>", "Undo stage hunk" },
                R = { "<Cmd>GitSignsResetBuffer<CR>", "Reset buffer" },
                n = { "<Cmd>Neogit<CR>", "Neogit" },
                l = { "<Cmd>Lazygit<CR>", "Lazygit" },
            },
            f = {
                name = "Find & Fold",
                f = { "<Cmd>HopWord<CR>", "Hop Word" },
                ["]"] = { "<Cmd>HopChar1<CR>", "Hop Char1" },
                ["["] = { "<Cmd>HopChar2<CR>", "Hop Char2" },
                l = { "<Cmd>HopLine<CR>", "Hop Line" },
                s = { "<Cmd>HopLineStart<CR>", "Hop Line Start" },
                m = { "<Cmd>:set foldmethod=manual<CR>", "Manual (default)" },
                i = { "<Cmd>:set foldmethod=indent<CR>", "Indent" },
                e = { "<Cmd>:set foldmethod=expr<CR>", "Expr" },
                d = { "<Cmd>:set foldmethod=diff<CR>", "Diff" },
                M = { "<Cmd>:set foldmethod=marker<CR>", "Marker" },
            },
            s = {
                name = "Spectre",
                d = {
                    '<Cmd>lua require("spectre").delete()<CR>',
                    "Toggle current item",
                },
                g = {
                    '<Cmd>lua require("spectre.actions").select_entry()<CR>',
                    "Goto current file",
                },
                q = {
                    '<Cmd>lua require("spectre.actions").send_to_qf()<CR>',
                    "Send all item to quickfix",
                },
                m = {
                    '<Cmd>lua require("spectre.actions").replace_cmd()<CR>',
                    "Input replace vim command",
                },
                o = {
                    '<Cmd>lua require("spectre").show_options()<CR>',
                    "show option",
                },
                R = {
                    '<Cmd>lua require("spectre.actions").run_replace()<CR>',
                    "Replace all",
                },
                v = {
                    '<Cmd>lua require("spectre").change_view()<CR>',
                    "Change result view mode",
                },
                c = {
                    '<Cmd>lua require("spectre").change_options("ignore-case")<CR>',
                    "Toggle ignore case",
                },
                h = {
                    '<Cmd>lua require("spectre").change_options("hidden")<CR>',
                    "Toggle search hidden",
                },
            },
            t = {
                name = "Telescope",
                b = { "<Cmd>Telescope file_browser<CR>", "File browser" },
                f = { "<Cmd>Telescope find_files<CR>", "Find files" },
                w = { "<Cmd>Telescope live_grep<CR>", "Live grep" },
                u = { "<Cmd>Telescope buffers<CR>", "Buffers" },
                m = { "<Cmd>Telescope marks<CR>", "Marks" },
                o = { "<Cmd>Telescope commands<CR>", "Commands" },
                y = { "<Cmd>Telescope symbols<CR>", "Symbols" },
                n = { "<Cmd>Telescope quickfix<CR>", "Quickfix" },
                c = { "<Cmd>Telescope git_commits<CR>", "Git commits" },
                B = { "<Cmd>Telescope git_bcommits<CR>", "Git bcommits" },
                r = { "<Cmd>Telescope git_branches<CR>", "Git branches" },
                s = { "<Cmd>Telescope git_status<CR>", "Git status" },
                S = { "<Cmd>Telescope git_stash<CR>", "Git stash" },
                i = { "<Cmd>Telescope git_files<CR>", "Git files" },
                M = { "<Cmd>Telescope media_files<CR>", "Media files" },
            },
        }
        local vmappings = {
            ["/"] = { ":CommentToggle<CR>", "Comment" },
            f = { "<Cmd>LspRangeFormatting<CR>", "Range formatting" },
        }
        local which_key = require("which-key")
        which_key.setup(options)
        which_key.register(nmappings, nopts)
        which_key.register(vmappings, vopts)
    end

    #+end_src

******   [[https://github.com/rebelot/heirline.nvim][heirline.nvim]]

        + INIT

    #+begin_src lua

    modules["rebelot/heirline.nvim"] = {
        after = "lvim-colorscheme",
        config = ui_config.heirline_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.heirline_nvim()
        local conditions = require("heirline.conditions")
        local utils = require("heirline.utils")
        local colors = LVIM_COLORS()
        local align = { provider = "%=" }
        local space = { provider = " " }
        local vi_mode = {
            init = function(self)
                self.mode = vim.fn.mode(1)
            end,
            static = {
                mode_names = {
                    n = "N",
                    no = "N?",
                    nov = "N?",
                    noV = "N?",
                    ["no\22"] = "N?",
                    niI = "Ni",
                    niR = "Nr",
                    niV = "Nv",
                    nt = "Nt",
                    v = "V",
                    vs = "Vs",
                    V = "V_",
                    Vs = "Vs",
                    ["\22"] = "^V",
                    ["\22s"] = "^V",
                    s = "S",
                    S = "S_",
                    ["\19"] = "^S",
                    i = "I",
                    ic = "Ic",
                    ix = "Ix",
                    R = "R",
                    Rc = "Rc",
                    Rx = "Rx",
                    Rv = "Rv",
                    Rvc = "Rv",
                    Rvx = "Rv",
                    c = "C",
                    cv = "Ex",
                    r = "...",
                    rm = "M",
                    ["r?"] = "?",
                    ["!"] = "!",
                    t = "T",
                },
                mode_colors = {
                    n = colors.color_01,
                    i = colors.color_02,
                    v = colors.color_03,
                    V = colors.color_03,
                    ["\22"] = colors.color_03,
                    c = colors.color_03,
                    s = colors.purple,
                    S = colors.purple,
                    ["\19"] = colors.purple,
                    R = colors.color_03,
                    r = colors.color_03,
                    ["!"] = colors.color_02,
                    t = colors.color_02,
                },
            },
            provider = function(self)
                return "   %(" .. self.mode_names[self.mode] .. "%)"
            end,
            hl = function(self)
                local mode = self.mode:sub(1, 1)
                return { fg = self.mode_colors[mode], bold = true }
            end,
        }
        local file_name_block = {
            init = function(self)
                self.filename = vim.api.nvim_buf_get_name(0)
            end,
        }
        local work_dir = {
            provider = function(self)
                self.icon = "    "
                local cwd = vim.fn.getcwd(0)
                self.cwd = vim.fn.fnamemodify(cwd, ":~")
            end,
            hl = { fg = colors.color_05, bold = true },
            utils.make_flexible_component(1, {
                provider = function(self)
                    local trail = self.cwd:sub(-1) == "/" and "" or "/"
                    return self.icon .. self.cwd .. trail
                end,
            }, {
                provider = function(self)
                    local cwd = vim.fn.pathshorten(self.cwd)
                    local trail = self.cwd:sub(-1) == "/" and "" or "/"
                    return self.icon .. cwd .. trail
                end,
            }, {
                provider = "",
            }),
        }
        local file_icon = {
            init = function(self)
                local filename = self.filename
                local extension = vim.fn.fnamemodify(filename, ":e")
                self.icon = require("nvim-web-devicons").get_icon_color(filename, extension, { default = true })
            end,
            provider = function(self)
                local is_filename = vim.fn.fnamemodify(self.filename, ":.")
                if is_filename ~= "" then
                    return self.icon and self.icon .. " "
                end
            end,
            hl = function()
                return { fg = colors.color_05 }
            end,
        }
        local file_name = {
            provider = function(self)
                local filename = vim.fn.fnamemodify(self.filename, ":.")
                if filename == "" then
                    return
                end
                if not conditions.width_percent_below(#filename, 0.25) then
                    filename = vim.fn.pathshorten(filename)
                end
                return filename .. " "
            end,
            hl = { fg = colors.color_05, bold = true },
        }
        local file_flags = {
            {
                provider = function()
                    if vim.bo.modified then
                        return " "
                    end
                end,
                hl = { fg = colors.color_02 },
            },
            {
                provider = function()
                    if not vim.bo.modifiable or vim.bo.readonly then
                        return "  "
                    end
                end,
                hl = { fg = colors.color_02 },
            },
        }
        local file_name_modifer = {
            hl = function()
                if vim.bo.modified then
                    return { fg = colors.color_05, bold = true, force = true }
                end
            end,
        }
        local file_size = {
            provider = function()
                local fsize = vim.fn.getfsize(vim.api.nvim_buf_get_name(0))
                fsize = (fsize < 0 and 0) or fsize
                if fsize <= 0 then
                    return
                end
                local file_size = require("core.funcs").file_size(fsize)
                return "  " .. file_size
            end,
            hl = { fg = colors.color_03 },
        }
        file_name_block = utils.insert(
            file_name_block,
            space,
            space,
            file_icon,
            utils.insert(file_name_modifer, file_name),
            file_size,
            unpack(file_flags),
            { provider = "%<" }
        )
        local git = {
            condition = conditions.is_git_repo,
            init = function(self)
                self.status_dict = vim.b.gitsigns_status_dict
                self.has_changes = self.status_dict.added ~= 0
                    or self.status_dict.removed ~= 0
                    or self.status_dict.changed ~= 0
            end,
            hl = { fg = colors.color_03 },
            {
                provider = "  ",
            },
            {
                provider = function(self)
                    return " " .. self.status_dict.head .. " "
                end,
                hl = { bold = true },
            },
            {
                provider = function(self)
                    local count = self.status_dict.added or 0
                    return count > 0 and ("  " .. count)
                end,
                hl = { fg = colors.color_01 },
            },
            {
                provider = function(self)
                    local count = self.status_dict.removed or 0
                    return count > 0 and ("  " .. count)
                end,
                hl = { fg = colors.color_02 },
            },
            {
                provider = function(self)
                    local count = self.status_dict.changed or 0
                    return count > 0 and ("  " .. count)
                end,
                hl = { fg = colors.color_03 },
            },
        }
        local diagnostics = {
            condition = conditions.has_diagnostics,
            static = {
                error_icon = " ",
                warn_icon = " ",
                info_icon = " ",
                hint_icon = " ",
            },
            update = { "DiagnosticChanged", "BufEnter" },
            init = function(self)
                self.errors = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.ERROR })
                self.warnings = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.WARN })
                self.hints = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.HINT })
                self.info = #vim.diagnostic.get(0, { severity = vim.diagnostic.severity.INFO })
            end,
            {
                provider = function(self)
                    return self.errors > 0 and (self.error_icon .. self.errors .. " ")
                end,
                hl = { fg = colors.color_02 },
            },
            {
                provider = function(self)
                    return self.warnings > 0 and (self.warn_icon .. self.warnings .. " ")
                end,
                hl = { fg = colors.color_03 },
            },
            {
                provider = function(self)
                    return self.info > 0 and (self.info_icon .. self.info .. " ")
                end,
                hl = { fg = colors.color_04 },
            },
            {
                provider = function(self)
                    return self.hints > 0 and (self.hint_icon .. self.hints .. " ")
                end,
                hl = { fg = colors.color_05 },
            },
        }
        local lsp_active = {
            condition = conditions.lsp_attached,
            update = { "LspAttach", "LspDetach" },
            provider = function()
                local names = {}
                for _, server in pairs(vim.lsp.buf_get_clients(0)) do
                    table.insert(names, server.name)
                end
                return "  " .. table.concat(names, ", ")
            end,
            hl = { fg = colors.color_05, bold = true },
        }
        local is_lsp_active = {
            condition = conditions.lsp_attached,
            update = { "LspAttach", "LspDetach" },
            provider = function()
                return "  "
            end,
            hl = { fg = colors.color_03, bold = true },
        }
        local file_type = {
            provider = function()
                local filetype = vim.bo.filetype
                if filetype ~= "" then
                    return string.upper(filetype)
                end
            end,
            hl = { fg = colors.color_03, bold = true },
        }
        local file_encoding = {
            provider = function()
                local enc = vim.opt.fileencoding:get()
                if enc ~= "" then
                    return " " .. enc:upper()
                end
            end,
            hl = { fg = colors.color_04, bold = true },
        }
        local file_format = {
            provider = function()
                local format = vim.bo.fileformat
                if format ~= "" then
                    local symbols = {
                        unix = " ",
                        dos = " ",
                        mac = " ",
                    }
                    return symbols[format]
                end
            end,
            hl = { fg = colors.color_04, bold = true },
        }
        local spell = {
            condition = function()
                return vim.wo.spell
            end,
            provider = "  SPELL",
            hl = { bold = true, fg = colors.color_03 },
        }
        local scroll_bar = {
            provider = function()
                local current_line = vim.fn.line(".")
                local total_lines = vim.fn.line("$")
                local chars = { "█", "▇", "▆", "▅", "▄", "▃", "▂", "▁" }
                local line_ratio = current_line / total_lines
                local index = math.ceil(line_ratio * #chars)
                return "  " .. chars[index]
            end,
            hl = { fg = colors.color_02 },
        }
        local file_icon_name = {
            provider = function()
                local function isempty(s)
                    return s == nil or s == ""
                end

                local hl_group_1 = "FileTextColor"
                vim.api.nvim_set_hl(0, hl_group_1, { fg = colors.color_01, bg = colors.status_line_bg, bold = true })
                local filename = vim.fn.expand("%:t")
                local extension = vim.fn.expand("%:e")
                if not isempty(filename) then
                    local file_icon, file_icon_color =
                        require("nvim-web-devicons").get_icon_color(filename, extension, { default = true })
                    local hl_group_2 = "FileIconColor" .. extension
                    vim.api.nvim_set_hl(0, hl_group_2, { fg = file_icon_color, bg = colors.status_line_bg })
                    if isempty(file_icon) then
                        file_icon = ""
                        file_icon_color = ""
                    end
                    return "%#"
                        .. hl_group_2
                        .. "# "
                        .. file_icon
                        .. "%*"
                        .. " "
                        .. "%#"
                        .. hl_group_1
                        .. "#"
                        .. filename
                        .. "%*"
                        .. "  "
                end
            end,
            hl = { fg = colors.color_02 },
        }
        local navic = {
            condition = require("nvim-navic").is_available,
            provider = require("nvim-navic").get_location,
        }
        local terminal_name = {
            provider = function()
                local tname, _ = vim.api.nvim_buf_get_name(0):gsub(".*:", "")
                return " " .. tname
            end,
            hl = { fg = colors.color_02, bold = true },
        }
        local status_lines = {
            hl = function()
                if conditions.is_active() then
                    return {
                        fg = colors.status_line_fg,
                        bg = colors.status_line_bg,
                    }
                else
                    return {
                        fg = colors.status_line_nc_fg,
                        bg = colors.status_line_nc_bg,
                    }
                end
            end,
            static = {
                mode_color = function(self)
                    local mode = conditions.is_active() and vim.fn.mode() or "n"
                    return self.mode_colors[mode]
                end,
            },
            init = utils.pick_child_on_condition,
            {
                vi_mode,
                work_dir,
                file_name_block,
                git,
                align,
                diagnostics,
                lsp_active,
                is_lsp_active,
                file_type,
                file_encoding,
                file_format,
                spell,
                scroll_bar,
            },
        }

        local win_bars = {
            init = utils.pick_child_on_condition,
            {
                condition = function()
                    return conditions.buffer_matches({
                        buftype = {
                            "nofile",
                            "prompt",
                            "help",
                            "quickfix",
                        },
                        filetype = {
                            "ctrlspace",
                            "ctrlspace_help",
                            "packer",
                            "undotree",
                            "diff",
                            "Outline",
                            "NvimTree",
                            "LvimHelper",
                            "floaterm",
                            "dashboard",
                            "vista",
                            "spectre_panel",
                            "DiffviewFiles",
                            "flutterToolsOutline",
                            "log",
                            "qf",
                            "dapui_scopes",
                            "dapui_breakpoints",
                            "dapui_stacks",
                            "dapui_watches",
                            "calendar",
                        },
                    })
                end,
                init = function()
                    vim.opt_local.winbar = nil
                end,
            },
            {
                condition = function()
                    return conditions.buffer_matches({ buftype = { "terminal" } })
                end,
                {
                    file_type,
                    space,
                    terminal_name,
                },
            },
            {
                condition = function()
                    return not conditions.is_active()
                end,
                {
                    file_icon_name,
                },
            },
            {
                file_icon_name,
                navic,
            },
        }
        if vim.fn.has("nvim-0.8") == 1 then
            require("heirline").setup(status_lines, win_bars)
        else
            require("heirline").setup(status_lines)
        end
    end

    #+end_src

******   [[https://github.com/is0n/fm-nvim][fm-nvim]]

        + INIT

    #+begin_src lua

    modules["is0n/fm-nvim"] = {
        config = ui_config.fm_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.fm_nvim()
        require("fm-nvim").setup({
            ui = {
                float = {
                    border = "single",
                    float_hl = "NormalFloat",
                    border_hl = "FloatBorder",
                    height = 0.95,
                    width = 0.99,
                },
            },
            cmds = {
                vifm_cmd = "vifmrun",
            },
        })
    end

    #+end_src

******   [[https://github.com/akinsho/toggleterm.nvim][toggleterm.nvim]]

        + INIT

    #+begin_src lua

    modules["akinsho/toggleterm.nvim"] = {
        tag = "v2.*",
        cmd = {
            "TTFloat",
            "TTOne",
            "TTTwo",
            "TTThree",
        },
        config = ui_config.toggleterm_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.toggleterm_nvim()
        local terminal_float = require("toggleterm.terminal").Terminal:new({
            count = 4,
            direction = "float",
            float_opts = {
                border = "single",
                winblend = 0,
                width = vim.o.columns - 20,
                height = vim.o.lines - 9,
                highlights = {
                    border = "FloatBorder",
                    background = "NormalFloat",
                },
            },
            on_open = function(term)
                vim.api.nvim_buf_set_keymap(term.bufnr, "n", "<Esc>", "<cmd>close<cr>", { noremap = true, silent = true })
                vim.api.nvim_buf_set_keymap(
                    term.bufnr,
                    "t",
                    "<Esc>",
                    "<c-\\><c-n><cmd>close<cr><c-w><c-p>",
                    { noremap = true }
                )
                vim.wo.cursorcolumn = false
                vim.wo.cursorline = false
                vim.cmd("startinsert!")
            end,
            on_close = function()
                vim.cmd("quit!")
            end,
        })
        local terminal_one = require("toggleterm.terminal").Terminal:new({
            count = 1,
            direction = "horizontal",
            on_open = function(term)
                vim.api.nvim_buf_set_keymap(term.bufnr, "n", "<Esc>", "<cmd>close<cr>", { noremap = true, silent = true })
                vim.api.nvim_buf_set_keymap(
                    term.bufnr,
                    "t",
                    "<Esc>",
                    "<c-\\><c-n><cmd>close<cr><c-w><c-p>",
                    { noremap = true, silent = true }
                )
                vim.api.nvim_buf_set_keymap(term.bufnr, "t", "<C-x>", "<c-\\><c-n>", { noremap = true, silent = true })
                vim.wo.cursorcolumn = false
                vim.wo.cursorline = false
                vim.cmd("startinsert!")
                vim.api.nvim_exec([[exe "normal \<C-W>\="]], true)
            end,
            on_close = function()
                vim.cmd("quit!")
            end,
        })
        local terminal_two = require("toggleterm.terminal").Terminal:new({
            count = 2,
            direction = "horizontal",
            on_open = function(term)
                vim.api.nvim_buf_set_keymap(term.bufnr, "n", "<Esc>", "<cmd>close<cr>", { noremap = true, silent = true })
                vim.api.nvim_buf_set_keymap(
                    term.bufnr,
                    "t",
                    "<Esc>",
                    "<c-\\><c-n><cmd>close<cr><c-w><c-p>",
                    { noremap = true, silent = true }
                )
                vim.api.nvim_buf_set_keymap(term.bufnr, "t", "<C-x>", "<c-\\><c-n>", { noremap = true, silent = true })
                vim.wo.cursorcolumn = false
                vim.wo.cursorline = false
                vim.cmd("startinsert!")
                vim.api.nvim_exec([[exe "normal \<C-W>\="]], true)
            end,
            on_close = function()
                vim.cmd("quit!")
            end,
        })
        local terminal_three = require("toggleterm.terminal").Terminal:new({
            count = 3,
            direction = "horizontal",
            on_open = function(term)
                vim.api.nvim_buf_set_keymap(term.bufnr, "n", "<Esc>", "<cmd>close<cr>", { noremap = true, silent = true })
                vim.api.nvim_buf_set_keymap(
                    term.bufnr,
                    "t",
                    "<Esc>",
                    "<c-\\><c-n><cmd>close<cr><c-w><c-p>",
                    { noremap = true, silent = true }
                )
                vim.api.nvim_buf_set_keymap(term.bufnr, "t", "<C-x>", "<c-\\><c-n>", { noremap = true, silent = true })
                vim.wo.cursorcolumn = false
                vim.wo.cursorline = false
                vim.cmd("startinsert!")
                vim.api.nvim_exec([[exe "normal \<C-W>\="]], true)
            end,
            on_close = function()
                vim.cmd("quit!")
            end,
        })
        function _G.toggleterm_float_toggle()
            terminal_float:toggle()
        end

        function _G.toggleterm_one_toggle()
            terminal_one:toggle()
        end

        function _G.toggleterm_two_toggle()
            terminal_two:toggle()
        end

        function _G.toggleterm_three_toggle()
            terminal_three:toggle()
        end

        vim.api.nvim_create_user_command("TTFloat", "lua _G.toggleterm_float_toggle()", {})
        vim.api.nvim_create_user_command("TTOne", "lua _G.toggleterm_one_toggle()", {})
        vim.api.nvim_create_user_command("TTTwo", "lua _G.toggleterm_two_toggle()", {})
        vim.api.nvim_create_user_command("TTThree", "lua _G.toggleterm_three_toggle()", {})
    end

    #+end_src

******   [[https://github.com/folke/zen-mode.nvim][zen-mode.nvim]]

        + REQUIRES:
          *  [[https://github.com/folke/twilight.nvim][twilight.nvim]]

        + INIT

    #+begin_src lua

    modules["folke/zen-mode.nvim"] = {
        requires = {
            {
                "folke/twilight.nvim",
                config = ui_config.twilight_nvim,
                after = "zen-mode.nvim",
            },
        },
        cmd = "ZenMode",
        config = ui_config.zen_mode_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.zen_mode_nvim()
        require("zen-mode").setup({
            window = {
                options = {
                    number = false,
                    relativenumber = false,
                },
            },
            plugins = {
                gitsigns = {
                    enabled = true,
                },
            },
        })
    end

    #+end_src

    #+begin_src lua

    function config.twilight_nvim()
        require("twilight").setup({
            dimming = {
                alpha = 0.5,
            },
        })
    end

    #+end_src

******   [[https://github.comnyngwang/NeoZoom.lua/][NeoZoom.lua]]

        + INIT

    #+begin_src lua

    modules["nyngwang/NeoZoom.lua"] = {
        config = ui_config.neozoom_lua,
        cmd = "NeoZoomToggle",
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.neozoom_lua()
        require("neo-zoom").setup({})
        vim.keymap.set("n", "<C-z>", function()
            vim.cmd("NeoZoomToggle")
        end, NOREF_NOERR_TRUNC)
    end

    #+end_src

******   [[https://github.com/lukas-reineke/indent-blankline.nvim][indent-blankline.nvim]]

        + INIT

    #+begin_src lua

    modules["lukas-reineke/indent-blankline.nvim"] = {
        event = {
            "BufRead",
        },
        config = ui_config.indent_blankline_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.indent_blankline_nvim()
        require("indent_blankline").setup({
            char = "▏",
            show_first_indent_level = true,
            show_trailing_blankline_indent = true,
            show_current_context = true,
            context_patterns = {
                "class",
                "function",
                "method",
                "block",
                "list_literal",
                "selector",
                "^if",
                "^table",
                "if_statement",
                "while",
                "for",
            },
            filetype_exclude = {
                "startify",
                "dashboard",
                "dotooagenda",
                "log",
                "fugitive",
                "gitcommit",
                "packer",
                "vimwiki",
                "markdown",
                "json",
                "txt",
                "vista",
                "help",
                "todoist",
                "NvimTree",
                "peekaboo",
                "git",
                "TelescopePrompt",
                "undotree",
                "org",
                "flutterToolsOutline",
            },
            buftype_exclude = {
                "terminal",
                "nofile",
            },
        })
    end

    #+end_src

******   [[https://github.com/rcarriga/nvim-notify][nvim-notify]]

        + INIT

    #+begin_src lua

    modules["rcarriga/nvim-notify"] = {
        after = "lvim-colorscheme",
        config = ui_config.nvim_notify,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_notify()
        local notify = require("notify")
        notify.setup({
            icons = {
                DEBUG = " ",
                ERROR = " ",
                INFO = " ",
                TRACE = " ",
                WARN = " ",
            },
            stages = "fade",
            on_open = function(win)
                if vim.api.nvim_win_is_valid(win) then
                    vim.api.nvim_win_set_config(win, { border = "single", zindex = 200 })
                end
            end,
        })
        notify.print_history = function()
            local color = {
                DEBUG = "NotifyDEBUGTitle",
                TRACE = "NotifyTRACETitle",
                INFO = "NotifyINFOTitle",
                WARN = "NotifyWARNTitle",
                ERROR = "NotifyERRORTitle",
            }
            for _, m in ipairs(notify.history()) do
                vim.api.nvim_echo({
                    { vim.fn.strftime("%FT%T", m.time), "Identifier" },
                    { " ", "Normal" },
                    { m.level, color[m.level] or "Title" },
                    { " ", "Normal" },
                    { table.concat(m.message, " "), "Normal" },
                }, false, {})
            end
        end
        vim.cmd("command! Message :lua require('notify').print_history()<CR>")
        vim.notify = notify
    end

    #+end_src

******   [[https://github.com/lvim-tech/lvim-focus][lvim-focus]]

        + INIT

    #+begin_src lua

    modules["lvim-tech/lvim-focus"] = {
        after = "lvim-colorscheme",
        config = ui_config.lvim_focus,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.lvim_focus()
        require("lvim-focus").setup()
    end

    #+end_src

******   [[https://github.com/lvim-tech/lvim-helper][lvim-helper]]

        + INIT

    #+begin_src lua

    modules["lvim-tech/lvim-helper"] = {
        cmd = "LvimHelper",
        config = ui_config.lvim_helper,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.lvim_helper()
        local global = require("core.global")
        require("lvim-helper").setup({
            files = {
                global.home .. "/.config/nvim/help/lvim_bindings_normal_mode.md",
                global.home .. "/.config/nvim/help/lvim_bindings_visual_mode.md",
                global.home .. "/.config/nvim/help/lvim_bindings_debug_dap.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_global.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_cursor_movement.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_visual_mode.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_visual_commands.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_insert_mode.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_editing.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_registers.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_marks_and_positions.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_macros.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_cut_and_paste.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_indent_text.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_exiting.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_search_and_replace.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_search_in_multiple_files.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_tabs.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_working_with_multiple_files.md",
                global.home .. "/.config/nvim/help/vim_cheat_sheet_diff.md",
            },
        })
    end

    #+end_src

*****  EDITOR

******   [[https://github.com/vim-ctrlspace/vim-ctrlspace][vim-ctrlspace]]

        + Init

    #+begin_src lua

    modules["vim-ctrlspace/vim-ctrlspace"] = {
        cmd = "CtrlSpace",
    }

    #+end_src

******   [[https://github.com/nvim-telescope/telescope.nvim][telescope.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-telescope/telescope-fzf-native.nvim][telescope-fzf-native.nvim]]
          *  [[https://github.com/nvim-telescope/telescope-fzf-native.nvim][telescope-fzf-native.nvim]]
          *  [[https://github.com/nvim-telescope/telescope-media-files.nvim][telescope-media-files.nvim]]
          *  [[https://github.com/nvim-telescope/telescope-file-browser.nvim][telescope-file-browser.nvim]]
          *  [[https://github.com/camgraff/telescope-tmux.nvim][telescope-tmux.nvim]]
          *  [[https://github.com/zane-/howdoi.nvim][howdoi.nvim]]

        + INIT

    #+begin_src lua

    modules["nvim-telescope/telescope.nvim"] = {
        requires = {
            {
                "nvim-telescope/telescope-fzf-native.nvim",
                run = "make",
                opt = true,
            },
            {
                "nvim-telescope/telescope-media-files.nvim",
                opt = true,
            },
            {
                "nvim-telescope/telescope-file-browser.nvim",
                opt = true,
            },
            {
                "camgraff/telescope-tmux.nvim",
                opt = true,
            },
            {
                "zane-/howdoi.nvim",
                opt = true,
            },
        },
        config = editor_config.telescope_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.telescope_nvim()
        local loader = require("packer").loader
        if not packer_plugins["telescope-fzf-native.nvim"].loaded then
            loader(
                "telescope-fzf-native.nvim"
                    .. " telescope-media-files.nvim"
                    .. " telescope-file-browser.nvim"
                    .. " telescope-tmux.nvim"
                    .. " howdoi.nvim"
            )
        end
        local telescope = require("telescope")
        telescope.setup({
            defaults = {
                prompt_prefix = "   ",
                selection_caret = "  ",
                entry_prefix = "  ",
                initial_mode = "insert",
                selection_strategy = "reset",
                sorting_strategy = "ascending",
                layout_strategy = "horizontal",
                layout_config = {
                    horizontal = {
                        prompt_position = "top",
                        preview_width = 0.55,
                        results_width = 0.8,
                    },
                    vertical = {
                        mirror = false,
                    },
                    width = 0.95,
                    height = 0.90,
                    preview_cutoff = 120,
                },
                vimgrep_arguments = {
                    "rg",
                    "--color=never",
                    "--no-heading",
                    "--with-filename",
                    "--line-number",
                    "--column",
                    "--smart-case",
                    "--hidden",
                },
                file_sorter = require("telescope.sorters").get_fuzzy_file,
                file_ignore_patterns = {
                    "node_modules",
                    ".git",
                    "target",
                    "vendor",
                },
                generic_sorter = require("telescope.sorters").get_generic_fuzzy_sorter,
                path_display = { shorten = 5 },
                winblend = 0,
                border = {},
                borderchars = { "─", "│", "─", "│", "┌", "┐", "┘", "└" },
                color_devicons = true,
                set_env = { ["COLORTERM"] = "truecolor" },
                file_previewer = require("telescope.previewers").vim_buffer_cat.new,
                grep_previewer = require("telescope.previewers").vim_buffer_vimgrep.new,
                qflist_previewer = require("telescope.previewers").vim_buffer_qflist.new,
                buffer_previewer_maker = require("telescope.previewers").buffer_previewer_maker,
            },
            pickers = {
                file_browser = {
                    hidden = true,
                },
                find_files = {
                    hidden = true,
                },
                live_grep = {
                    hidden = true,
                    only_sort_text = true,
                },
            },
            extensions = {
                fzf = {
                    fuzzy = true,
                    override_generic_sorter = false,
                    override_file_sorter = true,
                    case_mode = "smart_case",
                },
                media_files = {
                    filetypes = { "png", "webp", "jpg", "jpeg" },
                    find_cmd = "rg",
                },
                file_browser = {},
            },
        })
        telescope.load_extension("fzf")
        telescope.load_extension("media_files")
        telescope.load_extension("file_browser")
        telescope.load_extension("tmux")
        telescope.load_extension("howdoi")
    end

    #+end_src

******   [[https://github.com/kevinhwang91/nvim-bqf][nvim-bqf]]

        + INIT

    #+begin_src lua

    modules["kevinhwang91/nvim-bqf"] = {
        ft = "qf",
        requires = {
            {
                "junegunn/fzf",
                run = function()
                    vim.fn["fzf#install"]()
                end,
            },
        },
        config = editor_config.nvim_bqf,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_bqf()
        require("bqf").setup({
            preview = {
                border_chars = { "│", "│", "─", "─", "┌", "┐", "└", "┘", "█" },
            },
        })
    end

    #+end_src

******   [[https://gitlab.com/yorickpeterse/nvim-pqf][nvim-pqf]]

        + INIT

    #+begin_src lua

    modules["https://gitlab.com/yorickpeterse/nvim-pqf"] = {
        config = editor_config.nvim_pqf,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_pqf()
        require("pqf").setup()
    end

    #+end_src

******   [[https://github.com/nanozuki/tabby.nvim][tabby.nvim]]

        + INIT

    #+begin_src lua

    modules["nanozuki/tabby.nvim"] = {
        config = editor_config.tabby_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.tabby_nvim()
        local util = require("tabby.util")
        local hl_tabline = {
            color_01 = "#242B30",
            color_02 = "#A7C080",
        }
        local get_tab_label = function(tab_number)
            local s, v = pcall(function()
                if not packer_plugins["vim-ctrlspace"].loaded then
                    vim.cmd("packadd vim-ctrlspace")
                end
                return vim.api.nvim_eval("ctrlspace#util#Gettabvar(" .. tab_number .. ", 'CtrlSpaceLabel')")
            end)
            if s then
                if v == "" then
                    return tab_number
                else
                    return tab_number .. ": " .. v
                end
            else
                return tab_number .. ": " .. v
            end
        end
        local components = function()
            local coms = {
                {
                    type = "text",
                    text = {
                        "    ",
                        hl = {
                            fg = hl_tabline.color_01,
                            bg = hl_tabline.color_02,
                            style = "bold",
                        },
                    },
                },
            }
            local tabs = vim.api.nvim_list_tabpages()
            local current_tab = vim.api.nvim_get_current_tabpage()
            local name_of_buf
            for _, tabid in ipairs(tabs) do
                local tab_number = vim.api.nvim_tabpage_get_number(tabid)
                name_of_buf = get_tab_label(tab_number)
                if tabid == current_tab then
                    table.insert(coms, {
                        type = "tab",
                        tabid = tabid,
                        label = {
                            "  " .. name_of_buf .. "  ",
                            hl = { fg = hl_tabline.color_02, bg = hl_tabline.color_01, style = "bold" },
                        },
                    })
                    local wins = util.tabpage_list_wins(current_tab)
                    local top_win = vim.api.nvim_tabpage_get_win(current_tab)
                    for _, winid in ipairs(wins) do
                        local icon = " "
                        if winid == top_win then
                            icon = " "
                        end
                        local bufid = vim.api.nvim_win_get_buf(winid)
                        local buf_name = vim.api.nvim_buf_get_name(bufid)
                        table.insert(coms, {
                            type = "win",
                            winid = winid,
                            label = icon .. vim.fn.fnamemodify(buf_name, ":~:.") .. "  ",
                        })
                    end
                else
                    table.insert(coms, {
                        type = "tab",
                        tabid = tabid,
                        label = {
                            "  " .. name_of_buf .. "  ",
                            hl = { fg = hl_tabline.color_01, bg = hl_tabline.color_02, style = "bold" },
                        },
                    })
                end
            end
            table.insert(coms, { type = "text", text = { " ", hl = { bg = hl_tabline.color_01, style = "bold" } } })
            return coms
        end

        require("tabby").setup({
            components = components,
        })
    end

    #+end_src

******   [[https://github.com/booperlv/nvim-gomove][nvim-gomove]]

        + INIT

    #+begin_src lua

    modules["booperlv/nvim-gomove"] = {
        event = {
            "BufRead",
        },
        config = editor_config.nvim_gomove,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_gomove()
        require("gomove").setup()
    end

    #+end_src

******   [[https://github.com/jpalardy/vim-slime][vim-slime]]

        + INIT

    #+begin_src lua

    modules["jpalardy/vim-slime"] = {
        config = editor_config.vim_slime,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.vim_slime()
        vim.g.slime_target = "tmux"
    end

    #+end_src

******   [[https://github.com/windwp/nvim-spectre][nvim-spectre]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/popup.nvim][popup.nvim]]
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["windwp/nvim-spectre"] = {
        cmd = "Spectre",
        requires = {
            {
                "nvim-lua/popup.nvim",
            },
            {
                "nvim-lua/plenary.nvim",
            },
        },
        config = editor_config.nvim_spectre,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_spectre()
        vim.api.nvim_create_user_command("Spectre", "lua require('spectre').open()", {})
        require("spectre").setup({
            color_devicons = true,
            line_sep_start = "-----------------------------------------",
            result_padding = "|  ",
            line_sep = "-----------------------------------------",
            highlight = {
                ui = "String",
                search = "DiffAdd",
                replace = "DiffChange",
            },
            mapping = {
                ["delete_line"] = nil,
                ["enter_file"] = nil,
                ["send_to_qf"] = nil,
                ["replace_cmd"] = nil,
                ["show_option_menu"] = nil,
                ["run_replace"] = nil,
                ["change_view_mode"] = nil,
                ["toggle_ignore_case"] = nil,
                ["toggle_ignore_hidden"] = nil,
            },
            find_engine = {
                ["rg"] = {
                    cmd = "rg",
                    args = {
                        "--color=never",
                        "--no-heading",
                        "--with-filename",
                        "--line-number",
                        "--column",
                    },
                    options = {
                        ["ignore-case"] = {
                            value = "--ignore-case",
                            icon = "[I]",
                            desc = "ignore case",
                        },
                        ["hidden"] = {
                            value = "--hidden",
                            desc = "hidden file",
                            icon = "[H]",
                        },
                    },
                },
                ["ag"] = {
                    cmd = "ag",
                    args = { "--vimgrep", "-s" },
                    options = {
                        ["ignore-case"] = {
                            value = "-i",
                            icon = "[I]",
                            desc = "ignore case",
                        },
                        ["hidden"] = {
                            value = "--hidden",
                            desc = "hidden file",
                            icon = "[H]",
                        },
                    },
                },
            },
            replace_engine = {
                ["sed"] = {
                    cmd = "sed",
                    args = nil,
                },
                options = {
                    ["ignore-case"] = {
                        value = "--ignore-case",
                        icon = "[I]",
                        desc = "ignore case",
                    },
                },
            },
            default = {
                find = {
                    cmd = "rg",
                    options = { "ignore-case" },
                },
                replace = {
                    cmd = "sed",
                },
            },
            replace_vim_cmd = "cfdo",
            is_open_target_win = true,
            is_insert_mode = false,
        })
    end

    #+end_src

******   [[https://github.com/numToStr/Comment.nvim][Comment.nvim]]

        + INIT

    #+begin_src lua

    modules["numToStr/Comment.nvim"] = {
        event = {
            "CursorMoved",
        },
        config = editor_config.comment_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua


    function config.comment_nvim()
        require("Comment").setup()
    end

    #+end_src

******   [[https://github.com/MattesGroeger/vim-bookmarks][vim-bookmarks]]

        + INIT

    #+begin_src lua

    modules["MattesGroeger/vim-bookmarks"] = {
        cmd = "BookmarkToggle",
        config = editor_config.vim_bookmarks,
    }

    #+end_src

        + CONFIG

    #+begin_src lua


function config.vim_bookmarks()
    vim.g.bookmark_no_default_key_mappings = 1
    vim.g.bookmark_sign = ""
end

    #+end_src

******   [[https://github.com/ton/vim-bufsurf][vim-bufsurf]]

        + INIT

    #+begin_src lua

    modules["ton/vim-bufsurf"] = {
        event = {
            "BufRead",
        },
    }

    #+end_src

******   [[https://github.com/kkoomen/vim-doge][vim-doge]]

        + INIT

    #+begin_src lua

    modules["kkoomen/vim-doge"] = {
        cmd = {
            "DogeGenerate",
            "DogeCreateDocStandard",
        },
        run = ":call doge#install()",
        config = editor_config.vim_doge,
    }

    #+end_src

        + Config

    #+begin_src lua

    function config.vim_doge()
        vim.g.doge_mapping = "<Leader>*"
    end

    #+end_src

******   [[https://github.com/windwp/nvim-autopairs][nvim-autopairs]]

        + REQUIRES:
          *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]
          *  [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

        + INIT

    #+begin_src lua

    modules["windwp/nvim-autopairs"] = {
        requires = {
            {
                "nvim-treesitter/nvim-treesitter",
            },
            {
                "hrsh7th/nvim-cmp",
            },
        },
        after = {
            "nvim-treesitter",
            "nvim-cmp",
        },
        config = editor_config.nvim_autopairs,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_autopairs()
        local autopairs = require("nvim-autopairs")
        local Rule = require("nvim-autopairs.rule")
        local cond = require("nvim-autopairs.conds")
        autopairs.setup({
            check_ts = true,
            ts_config = {
                lua = {
                    "string",
                },
                javascript = {
                    "template_string",
                },
                java = false,
            },
        })
        autopairs.add_rule(Rule("$$", "$$", "tex"))
        autopairs.add_rules({
            Rule("$", "$", { "tex", "latex" })
                :with_pair(cond.not_after_regex_check("%%"))
                :with_pair(cond.not_before_regex_check("xxx", 3))
                :with_move(cond.none())
                :with_del(cond.not_after_regex_check("xx"))
                :with_cr(cond.none()),
        })
        autopairs.add_rules({
            Rule("$$", "$$", "tex"):with_pair(function(opts)
                print(vim.inspect(opts))
                if opts.line == "aa $$" then
                    return false
                end
            end),
        })
        local ts_conds = require("nvim-autopairs.ts-conds")
        autopairs.add_rules({
            Rule("%", "%", "lua"):with_pair(ts_conds.is_ts_node({ "string", "comment" })),
            Rule("$", "$", "lua"):with_pair(ts_conds.is_not_ts_node({ "function" })),
        })
    end

    #+end_src

******   [[https://github.com/windwp/nvim-ts-autotag][nvim-ts-autotag]]

        + REQUIRES:
          *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]
          *  [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

        + INIT

    #+begin_src lua

    modules["windwp/nvim-ts-autotag"] = {
        requires = {
            {
                "nvim-treesitter/nvim-treesitter",
            },
            {
                "hrsh7th/nvim-cmp",
            },
        },
        after = {
            "nvim-treesitter",
            "nvim-cmp",
        },
        config = editor_config.nvim_ts_autotag,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_ts_autotag()
        require("nvim-ts-autotag").setup()
    end

    #+end_src

******   [[https://github.com/kylechui/nvim-surround][nvim-surround]]

        + REQUIRES:
          *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]

        + INIT

    #+begin_src lua

    modules["kylechui/nvim-surround"] = {
        requires = {
            "nvim-treesitter/nvim-treesitter",
        },
        after = "nvim-treesitter",
        config = editor_config.nvim_surround,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_surround()
        require("nvim-surround").setup()
    end

    #+end_src

******   [[https://github.com/norcalli/nvim-colorizer.lua][nvim-colorizer.lua]]

        + INIT

    #+begin_src lua

    modules["norcalli/nvim-colorizer.lua"] = {
        event = {
            "BufRead",
        },
        config = editor_config.nvim_colorize_lua,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_colorize_lua()
        require("colorizer").setup({
            "*",
        }, {
            RGB = true,
            RRGGBB = true,
            RRGGBBAA = true,
            rgb_fn = true,
            hsl_fn = true,
            css = true,
            css_fn = true,
        })
    end

    #+end_src

******   [[https://github.com/xiyaowong/virtcolumn.nvim][virtcolumn.nvim]]

        + INIT

    #+begin_src lua

    modules["xiyaowong/virtcolumn.nvim"] = {
        event = {
            "BufRead",
        },
        config = editor_config.virtcolumn_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.virtcolumn_nvim()
        vim.api.nvim_set_option("colorcolumn", "120")
        vim.g.virtcolumn_char = "▕"
        vim.g.virtcolumn_priority = 10
    end

    #+end_src

******   [[https://github.com/declancm/cinnamon.nvim][cinnamon.nvim]]

        + INIT

    #+begin_src lua

    modules["declancm/cinnamon.nvim"] = {
        event = {
            "BufRead",
        },
        config = editor_config.cinnamon_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.cinnamon_nvim()
        require("cinnamon").setup({
            extra_keymaps = true,
            extended_keymaps = true,
        })
    end

    #+end_src

******   [[https://github.com/lambdalisue/suda.vim][suda.vim]]

        + INIT

    #+begin_src lua

    modules["lambdalisue/suda.vim"] = {
        event = {
            "BufRead",
        },
        config = editor_config.suda_vim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.suda_vim()
        vim.g.suda_smart_edit = 1
    end

    #+end_src

******   [[https://github.com/kenn7/vim-arsync][vim-arsync]]

        + INIT

    #+begin_src lua

    modules["kenn7/vim-arsync"] = {
        cmd = {
            "ARshowConf",
            "ARsyncUp",
            "ARsyncUpDelete",
            "ARsyncDown",
        },
    }

    #+end_src

******   [[https://github.com/phaazon/hop.nvim][hop.nvim]]

        + INIT

    #+begin_src lua

    modules["phaazon/hop.nvim"] = {
        event = {
            "BufRead",
        },
        branch = "v2",
        config = editor_config.hop_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.hop_nvim()
        require("hop").setup()
    end

    #+end_src

******   [[https://github.com/folke/todo-comments.nvim][todo-comments.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["folke/todo-comments.nvim"] = {
        requires = {
            "nvim-lua/plenary.nvim",
        },
        event = {
            "BufRead",
        },
        config = editor_config.todo_comments_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.todo_comments_nvim()
        require("todo-comments").setup({
            colors = {
                error = { "#F05F4E", "#F05F4E" },
                warning = { "#F2994B", "#F2994B" },
                info = { "#A7C080", "#A7C080" },
                hint = { "#FF7A66", "#FF7A66" },
                default = { "#90c1a3", "#90c1a3" },
            },
        })
    end

    #+end_src

******   [[https://github.com/anuvyklack/pretty-fold.nvim][pretty-fold.nvim]]

        + REQUIRES:
          *  [[https://github.com/anuvyklack/fold-preview.nvim][fold-preview.nvim]]

        + INIT

    #+begin_src lua

    modules["anuvyklack/pretty-fold.nvim"] = {
        requires = {
            "anuvyklack/fold-preview.nvim",
        },
        event = {
            "BufRead",
        },
        config = editor_config.pretty_fold_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.pretty_fold_nvim()
        require("pretty-fold").setup({
            fill_char = "─",
            sections = {
                left = {
                    "content",
                },
                right = {
                    "┤ ",
                    "number_of_folded_lines",
                    " ├─",
                },
            },
            ft_ignore = { "org" },
        })
        require("fold-preview").setup({
            default_keybindings = false,
        })
        local map = require("fold-preview").mapping
        function _G.fold_preview()
            map.show_close_preview_open_fold()
            vim.cmd("IndentBlanklineRefresh")
        end

        vim.api.nvim_create_user_command("FoldPreview", "lua _G.fold_preview()", {})
    end

    #+end_src

******   [[https://github.com/renerocksai/calendar-vim][calendar-vim]]

        + INIT

    #+begin_src lua

    modules["renerocksai/calendar-vim"] = {
        cmd = { "Calendar", "CalendarH", "CalendarT", "CalendarVR" },
        config = editor_config.calendar_vim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.calendar_vim()
        vim.g.calendar_diary_extension = ".org"
        vim.g.calendar_diary = "~/Org/diary/"
        vim.g.calendar_diary_path_pattern = "{YYYY}-{MM}-{DD}{EXT}"
        vim.g.calendar_monday = 1
        vim.g.calendar_weeknm = 1
    end

    #+end_src

*****  VERSION CONTROL

******   [[https://github.com/TimUntersberger/neogit][neogit]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["TimUntersberger/neogit"] = {
        requires = {
            "nvim-lua/plenary.nvim",
        },
        cmd = "Neogit",
        config = version_control_config.neogit,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.neogit()
        require("neogit").setup({
            disable_signs = false,
            disable_context_highlighting = false,
            disable_commit_confirmation = false,
            signs = {
                section = {
                    "",
                    "",
                },
                item = {
                    "",
                    "",
                },
                hunk = {
                    "",
                    "",
                },
            },
            integrations = {
                diffview = true,
            },
        })
    end

    #+end_src

******   [[https://github.com/lewis6991/gitsigns.nvim][gitsigns.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["lewis6991/gitsigns.nvim"] = {
        requires = {
            "nvim-lua/plenary.nvim",
        },
        event = {
            "BufRead",
        },
        config = version_control_config.gitsigns_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.gitsigns_nvim()
        require("gitsigns").setup({
            signs = {
                add = {
                    hl = "GitSignsAdd",
                    text = " ▎",
                    numhl = "GitSignsAddNr",
                    linehl = "GitSignsAddLn",
                },
                change = {
                    hl = "GitSignsChange",
                    text = " ▎",
                    numhl = "GitSignsChangeNr",
                    linehl = "GitSignsChangeLn",
                },
                delete = {
                    hl = "GitSignsDelete",
                    text = " ▎",
                    numhl = "GitSignsDeleteNr",
                    linehl = "GitSignsDeleteLn",
                },
                topdelete = {
                    hl = "GitSignsDelete",
                    text = " ▎",
                    numhl = "GitSignsDeleteNr",
                    linehl = "GitSignsDeleteLn",
                },
                changedelete = {
                    hl = "GitSignsChange",
                    text = " ▎",
                    numhl = "GitSignsChangeNr",
                    linehl = "GitSignsChangeLn",
                },
            },
            numhl = false,
            linehl = false,
            keymaps = {
                noremap = true,
                buffer = true,
            },
        })
        vim.api.nvim_create_user_command("GitSignsPreviewHunk", "lua require('gitsigns').preview_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsNextHunk", "lua require('gitsigns').next_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsPrevHunk", "lua require('gitsigns').prev_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsStageHunk", "lua require('gitsigns').stage_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsUndoStageHunk", "lua require('gitsigns').undo_stage_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsResetHunk", "lua require('gitsigns').reset_hunk()", {})
        vim.api.nvim_create_user_command("GitSignsResetBuffer", "lua require('gitsigns').reset_buffer()", {})
        vim.api.nvim_create_user_command("GitSignsBlameLine", "lua require('gitsigns').blame_line()", {})
    end

    #+end_src

******   [[https://github.com/f-person/git-blame.nvim][git-blame.nvim]]

        + INIT

    #+begin_src lua

    modules["f-person/git-blame.nvim"] = {
        event = {
            "BufRead",
        },
        config = version_control_config.git_blame_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.git_blame_nvim()
        vim.g.gitblame_ignored_filetypes = {
            "help",
            "NvimTree",
            "Outline",
            "git",
            "dapui_scopes",
            "dapui_breakpoints",
            "dapui_stacks",
            "dapui_watches",
            "NeogitStatus",
            "dashboard",
        }
    end

    #+end_src

******   [[https://github.com/sindrets/diffview.nvim][diffview.nvim]]

        + INIT

    #+begin_src lua

    modules["sindrets/diffview.nvim"] = {
        cmd = {
            "DiffviewOpen",
            "DiffviewFileHistory",
            "DiffviewFocusFiles",
            "DiffviewToggleFiles",
            "DiffviewRefresh",
        },
    }

    #+end_src

******   [[https://github.com/pwntester/octo.nvim][pwntester/octo.nvim]]

        + INIT

    #+begin_src lua

    modules["pwntester/octo.nvim"] = {
        after = "lvim-colorscheme",
        requires = {
            "nvim-lua/plenary.nvim",
            "nvim-telescope/telescope.nvim",
            "kyazdani42/nvim-web-devicons",
        },
        config = version_control_config.octo_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.octo_nvim()
        require("octo").setup()
    end

    #+end_src

******   [[https://github.com/mbbill/undotree][undotree]]

        + INIT

    #+begin_src lua

    modules["mbbill/undotree"] = {
        event = {
            "BufRead",
        },
        cmd = "UndotreeToggle",
    }

    #+end_src

*****  LANGUAGES

******   [[https://github.com/williamboman/mason.nvim][mason.nvim]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

        + INIT

    #+begin_src lua

    modules["williamboman/mason.nvim"] = {
        requires = {
            "neovim/nvim-lspconfig",
        },
        config = languages_config.mason,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.mason()
        -- LSP buf
        vim.api.nvim_create_user_command("LspAddToWorkspaceFolder", "lua vim.lsp.buf.add_workspace_folder()", {})
        vim.api.nvim_create_user_command("LspListWorkspaceFolders", "lua vim.lsp.buf.list_workspace_folders()", {})
        vim.api.nvim_create_user_command("LspRemoveWorkspaceFolder", "lua vim.lsp.buf.remove_workspace_folder()", {})
        vim.api.nvim_create_user_command("LspWorkspaceSymbol", "lua vim.lsp.buf.workspace_symbol()", {})
        vim.api.nvim_create_user_command("LspDocumentSymbol", "lua vim.lsp.buf.document_symbol()", {})
        vim.api.nvim_create_user_command("LspReferences", "lua vim.lsp.buf.references()", {})
        vim.api.nvim_create_user_command("LspClearReferences", "lua vim.lsp.buf.clear_references()", {})
        vim.api.nvim_create_user_command("LspCodeAction", "lua vim.lsp.buf.code_action()", {})
        vim.api.nvim_create_user_command("LspRangeCodeAction", "lua vim.api.nvim_create_user_command()", {})
        vim.api.nvim_create_user_command("LspCodeLensRefresh", "lua vim.lsp.codelens.refresh()", {})
        vim.api.nvim_create_user_command("LspCodeLensRun", "lua vim.lsp.codelens.run()", {})
        vim.api.nvim_create_user_command("LspDeclaration", "lua vim.lsp.buf.declaration()", {})
        vim.api.nvim_create_user_command("LspDefinition", "lua vim.lsp.buf.definition()", {})
        vim.api.nvim_create_user_command("LspTypeDefinition", "lua vim.lsp.buf.type_definition()", {})
        vim.api.nvim_create_user_command("LspDocumentHighlight", "lua vim.lsp.buf.document_highlight()", {})
        vim.api.nvim_create_user_command("LspImplementation", "lua vim.lsp.buf.implementation()", {})
        vim.api.nvim_create_user_command("LspIncomingCalls", "lua vim.lsp.buf.incoming_calls()", {})
        vim.api.nvim_create_user_command("LspOutgoingCalls", "lua vim.lsp.buf.outgoing_calls()", {})
        if vim.fn.has("nvim-0.8") == 1 then
            vim.api.nvim_create_user_command("LspFormatting", "lua vim.lsp.buf.format {async = true}", {})
        else
            vim.api.nvim_create_user_command("LspFormatting", "lua vim.lsp.buf.formatting()", {})
        end
        vim.api.nvim_create_user_command("LspRename", "lua vim.lsp.buf.rename()", {})
        vim.api.nvim_create_user_command("LspSignatureHelp", "lua vim.lsp.buf.signature_help()", {})
        -- LSP diagnostic
        require("mason").setup({
            ui = {
                icons = {
                    package_installed = " ",
                    package_pending = " ",
                    package_uninstalled = " ",
                },
            },
        })
        require("languages.base.utils").setup_diagnostic()
    end

    #+end_src

******   [[https://github.com/rmagatti/goto-preview][goto-preview]]

        + INIT

    #+begin_src lua

    modules["rmagatti/goto-preview"] = {
        event = {
            "BufRead",
        },
        config = languages_config.goto_preview,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.goto_preview()
        require("goto-preview").setup({
            border = { " ", " ", " ", " ", " ", " ", " ", " " }, -- Border characters of the floating window
        })
        vim.api.nvim_create_user_command("LspDefinition", "lua require('goto-preview').goto_preview_definition()", {})
        vim.api.nvim_create_user_command(
            "LspTypeDefinition",
            "lua require('goto-preview').goto_preview_type_definition()",
            {}
        )
        vim.api.nvim_create_user_command("LspReferences", "lua require('goto-preview').goto_preview_references()", {})
        vim.api.nvim_create_user_command(
            "LspImplementation",
            "lua require('goto-preview').goto_preview_implementation()",
            {}
        )
    end

    #+end_src

******   [[https://github.com/lewis6991/hover.nvim][hover.nvim]]

        + INIT

    #+begin_src lua

    modules["lewis6991/hover.nvim"] = {
        event = {
            "BufRead",
        },
        config = languages_config.hover_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.hover_nvim()
        require("hover").setup({
            init = function()
                require("hover.providers.lsp")
            end,
            preview_opts = {
                border = nil,
            },
            title = false,
        })
        vim.api.nvim_create_user_command("Hover", "lua require('hover').hover()", {})
    end

    #+end_src

******   [[https://github.com/lvim-tech/fidget.nvim][fidget.nvim]]

        + INIT

    #+begin_src lua

    modules["lvim-tech/fidget.nvim"] = {
        event = {
            "BufRead",
        },
        config = fidget_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.fidget_nvim()
        require("fidget").setup({
            text = {
                spinner = "bouncing_bar", -- animation shown when tasks are ongoing
            },
            window = {
                relative = "editor", -- where to anchor, either "win" or "editor"
                blend = 0,

                border = { " ", " ", " ", " ", " ", " ", " ", " " },
            },
        })
    end

    #+end_src


******   [[https://github.com/folke/lua-dev.nvim][lua-dev.nvim]]

        + INIT

    #+begin_src lua

    modules["folke/lua-dev.nvim"] = {
        ft = "lua",
    }

    #+end_src

******   [[https://github.com/simrat39/rust-tools.nvim][rust-tools.nvim]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]
          *  [[https://github.com/nvim-lua/popup.nvim][popup.nvim]]
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]
          *  [[https://github.com/mfussenegger/nvim-dap][nvim-dap]]
          *  [[https://github.com/nvim-telescope/telescope.nvim][telescope.nvim]]

        + INIT

    #+begin_src lua

    modules["simrat39/rust-tools.nvim"] = {
        ft = "rust",
        after = "telescope.nvim",
        requires = {
            {
                "neovim/nvim-lspconfig",
            },
            {
                "nvim-lua/popup.nvim",
            },
            {
                "nvim-lua/plenary.nvim",
            },
            {
                "mfussenegger/nvim-dap",
            },
            {
                "nvim-telescope/telescope.nvim",
            },
        },
    }

    #+end_src

******   [[https://github.com/ray-x/go.nvim][go.nvim]]

        + INIT

    #+begin_src lua

    modules["ray-x/go.nvim"] = {
        ft = "go",
        config = languages_config.go_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.go_nvim()
        require("go").setup({
            lsp_inlay_hints = {
                enable = false,
            },
        })
    end

    #+end_src

******   [[https://github.com/akinsho/flutter-tools.nvim][flutter-tools.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["akinsho/flutter-tools.nvim"] = {
        ft = "dart",
        requires = {
            "nvim-lua/plenary.nvim",
        },
    }

    #+end_src

******   [[https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils][nvim-lsp-ts-utils]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["jose-elias-alvarez/nvim-lsp-ts-utils"] = {
        ft = { "javascript", "javascriptreact", "typescript", "typescriptreact" },
        requires = {
            {
                "neovim/nvim-lspconfig",
            },
            {
                "nvim-lua/plenary.nvim",
            },
        },
    }

    #+end_src

******   [[https://github.com/Mofiqul/trld.nvim][trld.nvim]]

        + INIT

    #+begin_src lua

    modules["Mofiqul/trld.nvim"] = {
        event = {
            "BufRead",
        },
        config = languages_config.trld_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.trld_nvim()
        require("trld").setup({
            position = "bottom",
            highlights = {
                error = "DiagnosticError",
                warn = "DiagnosticWarn",
                info = "DiagnosticInfo",
                hint = "DiagnosticHint",
            },
        })
    end

    #+end_src

******   [[https://github.com/kosayoda/nvim-lightbulb][nvim-lightbulb]]

        + INIT

    #+begin_src lua

    modules["kosayoda/nvim-lightbulb"] = {
        event = {
            "BufRead",
        },
        config = languages_config.nvim_lightbulb,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_lightbulb()
        require("nvim-lightbulb").setup({
            sign = {
                enabled = true,
                priority = 10,
            },
            virtual_text = {
                enabled = true,
                text = "",
                hl_mode = "combine",
            },
            autocmd = {
                enabled = true,
            },
        })
        vim.fn.sign_define("LightBulbSign", { text = "", texthl = "LightBulb", linehl = "", numhl = "" })
    end

    #+end_src

******   [[https://github.com/NTBBloodbath/rest.nvim][rest.nvim]]

        + INIT

    #+begin_src lua

    modules["NTBBloodbath/rest.nvim"] = {
        ft = "http",
        config = languages_config.rest_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.rest_nvim()
        require("rest-nvim").setup()
    end

    #+end_src

******   [[https://github.com/michaelb/sniprun][sniprun]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

        + INIT

    #+begin_src lua

    modules["michaelb/sniprun"] = {
        requires = {
            "neovim/nvim-lspconfig",
        },
        run = "bash ./install.sh",
        cmd = {
            "SnipRun",
            "SnipInfo",
            "SnipReset",
            "SnipReplMemoryClean",
            "SnipClose",
        },
        config = languages_config.sniprun,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.sniprun()
        require("sniprun").setup()
    end

    #+end_src

******   [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]

        + INIT

    #+begin_src lua

    modules["nvim-treesitter/nvim-treesitter"] = {
        config = languages_config.nvim_treesitter,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_treesitter()
        require("nvim-treesitter.configs").setup({
            ensure_installed = "all",
            playground = {
                enable = true,
                disable = {},
                updatetime = 25,
                persist_queries = false,
                keybindings = {
                    toggle_query_editor = "o",
                    toggle_hl_groups = "i",
                    toggle_injected_languages = "t",
                    toggle_anonymous_nodes = "a",
                    toggle_language_display = "I",
                    focus_language = "f",
                    unfocus_language = "F",
                    update = "R",
                    goto_node = "<cr>",
                    show_help = "?",
                },
            },
            highlight = {
                enable = true,
                disable = { "markdown" },
                additional_vim_regex_highlighting = { "org" },
            },
            indent = {
                enable = true,
                disable = { "html" },
            },
            autopairs = {
                enable = true,
                disable = { "html" },
            },
            autotag = {
                enable = true,
                disable = { "html" },
            },
            rainbow = {
                enable = true,
                disable = { "html" },
            },
            context_commentstring = {
                enable = true,
                disable = { "html" },
                config = {
                    javascriptreact = {
                        style_element = "{/*%s*/}",
                    },
                },
            },
        })
    end

    #+end_src

******   [[https://github.com/nvim-treesitter/nvim-treesitter-context][nvim-treesitter-context]]

        + REQUIRES:
          *  [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]

        + INIT

    #+begin_src lua

    modules["nvim-treesitter/nvim-treesitter-context"] = {
        requires = {
            "nvim-treesitter/nvim-treesitter",
        },
        after = "nvim-treesitter",
        config = languages_config.nvim_treesitter_contex,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_treesitter_contex()
        require("treesitter-context").setup({
            enable = true,
            max_lines = 10,
            patterns = {
                default = {
                    "class",
                    "function",
                    "method",
                    "for",
                    "while",
                    "if",
                    "switch",
                    "case",
                },
            },
        })
    end

    #+end_src

******   [[https://github.com/lvimuser/lsp-inlayhints.nvim][lsp-inlayhints.nvim]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

        + INIT

    #+begin_src lua

    modules["lvimuser/lsp-inlayhints.nvim"] = {
        requires = {
            {
                "neovim/nvim-lspconfig",
            },
        },
        config = languages_config.lsp_inlayhints_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.lsp_inlayhints_nvim()
        require("lsp-inlayhints").setup({
            inlay_hints = {
                highlight = "Comment",
            },
        })
    end

    #+end_src


******   [[https://github.com/SmiteshP/nvim-navic][nvim-navic]]

        + REQUIRES:
          *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

        + INIT

    #+begin_src lua

    modules["SmiteshP/nvim-navic"] = {
        requires = {
            {
                "neovim/nvim-lspconfig",
            },
        },
        config = languages_config.nvim_navic,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_navic()
        local navic = require("nvim-navic")
        navic.setup({
            highlight = true,
            separator = " ➤ ",
        })
        vim.g.navic_silence = true
    end

    #+end_src

******   [[https://github.com/pechorin/any-jump.vim][any-jump.vim]]

        + INIT

    #+begin_src lua

    modules["pechorin/any-jump.vim"] = {
        event = {
            "BufRead",
        },
        config = languages_config.any_jump_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.any_jump_nvim()
        vim.g.any_jump_disable_default_keybindings = 1
        vim.g.any_jump_list_numbers = 1
    end

    #+end_src

******   [[https://github.com/folke/trouble.nvim][trouble.nvim]]

        + REQUIRES:
          *  [[https://github.com/kyazdani42/nvim-web-devicons][nvim-web-devicons]]

        + INIT

    #+begin_src lua

    modules["folke/trouble.nvim"] = {
        requires = {
            "kyazdani42/nvim-web-devicons",
        },
        config = languages_config.trouble_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.trouble_nvim()
        require("trouble").setup({
            height = 12,
            mode = "workspace_diagnostics",
            use_diagnostic_signs = true,
            signs = {
                error = "",
                warning = "",
                hint = "",
                information = "",
                other = "",
            },
        })
    end

    #+end_src

******   [[https://github.com/simrat39/symbols-outline.nvim][symbols-outline.nvim]]

        + INIT

    #+begin_src lua

    modules["simrat39/symbols-outline.nvim"] = {
        cmd = "SymbolsOutline",
        config = languages_config.symbols_outline_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.symbols_outline_nvim()
        require("symbols-outline").setup({
            highlight_hovered_item = true,
            show_guides = true,
        })
    end

    #+end_src

******   [[https://github.com/rcarriga/nvim-dap-ui][nvim-dap-ui]]

        + REQUIRES:
          *  [[https://github.com/mfussenegger/nvim-dap][nvim-dap]]
          *  [[https://github.com/jbyuki/one-small-step-for-vimkind][one-small-step-for-vimkind]]

        + INIT

    #+begin_src lua

    modules["rcarriga/nvim-dap-ui"] = {
        event = {
            "BufRead",
        },
        requires = {
            {
                "mfussenegger/nvim-dap",
            },
            {
                "jbyuki/one-small-step-for-vimkind",
            },
        },
        config = languages_config.nvim_dap_ui,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_dap_ui()
        local dapui = require("dapui")
        local dap = require("dap")
        dapui.setup({
            icons = {
                expanded = "▾",
                collapsed = "▸",
            },
            mappings = {
                expand = {
                    "<CR>",
                    "<2-LeftMouse>",
                },
                open = "o",
                remove = "d",
                edit = "e",
                repl = "r",
            },
            layouts = {
                {
                    elements = {
                        "scopes",
                        "breakpoints",
                        "stacks",
                        "watches",
                    },
                    size = 40,
                    position = "left",
                },
                {
                    elements = {
                        "repl",
                        "console",
                    },
                    size = 10,
                    position = "bottom",
                },
            },
            floating = {
                max_height = nil,
                max_width = nil,
                mappings = {
                    close = {
                        "q",
                        "<Esc>",
                    },
                },
            },
            windows = {
                indent = 1,
            },
        })
        dap.listeners.after.event_initialized["dapui_config"] = function()
            dapui.open()
        end
        dap.listeners.before.event_terminated["dapui_config"] = function()
            dapui.close()
        end
        dap.listeners.before.event_exited["dapui_config"] = function()
            dapui.close()
        end
        vim.fn.sign_define("DapBreakpoint", {
            text = "",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.fn.sign_define("DapStopped", {
            text = "",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.fn.sign_define("DapLogPoint", {
            text = "▶",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.api.nvim_create_user_command("DapToggleBreakpoint", 'lua require("dap").toggle_breakpoint()', {})
        vim.api.nvim_create_user_command("DapStartContinue", 'lua require"dap".continue()', {})
        vim.api.nvim_create_user_command("DapStepInto", 'lua require"dap".step_into()', {})
        vim.api.nvim_create_user_command("DapStepOver", 'lua require"dap".step_over()', {})
        vim.api.nvim_create_user_command("DapStepOut", 'lua require"dap".step_out()', {})
        vim.api.nvim_create_user_command("DapUp", 'lua require"dap".up()', {})
        vim.api.nvim_create_user_command("DapDown", 'lua require"dap".down()', {})
        vim.api.nvim_create_user_command("DapPause", 'lua require"dap".pause()', {})
        vim.api.nvim_create_user_command("DapClose", 'lua require"dap".close()', {})
        vim.api.nvim_create_user_command("DapDisconnect", 'lua require"dap".disconnect()', {})
        vim.api.nvim_create_user_command("DapRestart", 'lua require"dap".restart()', {})
        vim.api.nvim_create_user_command("DapToggleRepl", 'lua require"dap".repl.toggle()', {})
        vim.api.nvim_create_user_command("DapGetSession", 'lua require"dap".session()', {})
        vim.api.nvim_create_user_command(
            "DapUIClose",
            'lua require"dap".close(); require"dap".disconnect(); require"dapui".close()',
            {}
        )
    end

    #+end_src

#+begin_src lua

    function config.dapinstall()
        local path_debuggers = vim.fn.stdpath("data") .. "/dapinstall/"
        require("dap-install").setup({
            installation_path = path_debuggers,
        })
    end

#+end_src

******   [[https://github.com/kristijanhusak/vim-dadbod-ui][vim-dadbod-ui]]

        + REQUIRES:
          *  [[https://github.com/tpope/vim-dadbod][vim-dadbod]]
          *  [[https://github.com/kristijanhusak/vim-dadbod-completion][vim-dadbod-completion]]

        + INIT

    #+begin_src lua

    modules["kristijanhusak/vim-dadbod-ui"] = {
        requires = {
            {
                "tpope/vim-dadbod",
                after = "vim-dadbod-ui",
            },
            {
                "kristijanhusak/vim-dadbod-completion",
                after = "vim-dadbod-ui",
            },
        },
        cmd = {
            "DBUIToggle",
            "DBUIAddConnection",
            "DBUI",
            "DBUIFindBuffer",
            "DBUIRenameBuffer",
        },
        config = languages_config.vim_dadbod_ui,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.vim_dadbod_ui()
        vim.g.db_ui_show_help = 0
        vim.g.db_ui_win_position = "left"
        vim.g.db_ui_use_nerd_fonts = 1
        vim.g.db_ui_winwidth = 35
        vim.api.nvim_set_keymap("n", "<leader>Du", ":DBUIToggle<CR>", {
            noremap = true,
            silent = true,
        })
        vim.api.nvim_set_keymap("n", "<leader>Df", ":DBUIFindBuffer<CR>", {
            noremap = true,
            silent = true,
        })
        vim.api.nvim_set_keymap("n", "<leader>Dr", ":DBUIRenameBuffer<CR>", {
            noremap = true,
            silent = true,
        })
        vim.api.nvim_set_keymap("n", "<leader>Dl", ":DBUILastQueryInfo<CR>", {
            noremap = true,
            silent = true,
        })
        vim.g.db_ui_auto_execute_table_helpers = true
    end

    #+end_src

******   [[https://github.com/vuki656/package-info.nvim][package-info.nvim]]

        + REQUIRES:
          *  [[https://github.com/MunifTanjim/nui.nvim][nui.nvim]]

        + INIT

    #+begin_src lua

    modules["vuki656/package-info.nvim"] = {
        requires = {
            "MunifTanjim/nui.nvim",
        },
        event = "BufRead package.json",
        config = languages_config.package_info,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.package_info_nvim()
        require("package-info").setup({
            colors = {
                up_to_date = "#98c379",
                outdated = "#F05F4E",
            },
        })
    end

    #+end_src

******   [[https://github.com/Saecki/crates.nvim][crates.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["Saecki/crates.nvim"] = {
        requires = {
            "nvim-lua/plenary.nvim",
        },
        event = "BufRead Cargo.toml",
        config = languages_config.crates_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.crates_nvim()
        require("crates").setup()
        vim.api.nvim_create_user_command("CratesUpdate", "lua require('crates').update()", {})
        vim.api.nvim_create_user_command("CratesReload", "lua require('crates').reload()", {})
        vim.api.nvim_create_user_command("CratesHide", "lua require('crates').hide()", {})
        vim.api.nvim_create_user_command("CratesToggle", "lua require('crates').toggle()", {})
        vim.api.nvim_create_user_command("CratesUpdateCrate", "lua require('crates').update_crate()", {})
        vim.api.nvim_create_user_command("CratesUpdateCrates", "lua require('crates').update_crates()", {})
        vim.api.nvim_create_user_command("CratesUpdateAllCrates", "lua require('crates').update_all_crates()", {})
        vim.api.nvim_create_user_command("CratesUpgradeCrate", "lua require('crates').upgrade_crate()", {})
        vim.api.nvim_create_user_command("CratesUpgradeCrates", "lua require('crates').upgrade_crates()", {})
        vim.api.nvim_create_user_command("CratesUpgradeAllCrates", "lua require('crates').upgrade_all_crates()", {})
        vim.api.nvim_create_user_command("CratesShowPopup", "lua require('crates').show_popup()", {})
        vim.api.nvim_create_user_command("CratesShowVersionsPopup", "lua require('crates').show_versions_popup()", {})
        vim.api.nvim_create_user_command("CratesShowFeaturesPopup", "lua require('crates').show_features_popup()", {})
        vim.api.nvim_create_user_command("CratesFocusPopup", "lua require('crates').focus_popup()", {})
        vim.api.nvim_create_user_command("CratesHidePopup", "lua require('crates').hide_popup()", {})
    end

    #+end_src

******   [[https://github.com/akinsho/pubspec-assist.nvim][pubspec-assist.nvim]]

        + REQUIRES:
          *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

        + INIT

    #+begin_src lua

    modules["akinsho/pubspec-assist.nvim"] = {
        requires = {
            "nvim-lua/plenary.nvim",
        },
        event = "BufRead pubspec.yaml",
        rocks = {
            {
                "lyaml",
                server = "http://rocks.moonscript.org",
            },
        },
        config = languages_config.pubspec_assist_nvim,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.pubspec_assist_nvim()
        require("pubspec-assist").setup()
    end

    #+end_src

******   [[https://github.com/davidgranstrom/nvim-markdown-preview][nvim-markdown-preview]]

        + INIT

    #+begin_src lua

    modules["davidgranstrom/nvim-markdown-preview"] = {
        ft = "markdown",
    }

    #+end_src

******   [[https://github.com/lervag/vimtex][vimtex]]

        + INIT

    #+begin_src lua

    modules["lervag/vimtex"] = {
        config = languages_config.vimtex,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.vimtex()
        vim.g.vimtex_view_method = "zathura"
        vim.g.latex_view_general_viewer = "zathura"
        vim.g.vimtex_compiler_progname = "nvr"
        vim.g.vimtex_compiler_callback_compiling = "nvr"
        vim.g.vimtex_quickfix_open_on_warning = 0
    end

    #+end_src

******   [[https://github.com/dhruvasagar/vim-table-mode][vim-table-mode]]

        + INIT

    #+begin_src lua

    modules["dhruvasagar/vim-table-mode"] = {
        event = {
            "BufRead",
        },
    }

    #+end_src

******   [[https://github.com/nvim-orgmode/orgmode][orgmode]]

        + INIT

    #+begin_src lua

    modules["nvim-orgmode/orgmode"] = {
        config = languages_config.orgmode,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.orgmode()
        require("orgmode").setup_ts_grammar()
        require("orgmode").setup({
            emacs_config = {
                config_path = "$HOME/.emacs.d/early-init.el",
            },
            org_agenda_files = { "$HOME/Org/**/*" },
            org_default_notes_file = "$HOME/Org/refile.org",
        })
    end

    #+end_src

******   [[https://github.com/lvim-tech/lvim-org-utils][lvim-org-utils]]

        + INIT

    #+begin_src lua

    modules["lvim-tech/lvim-org-utils"] = {
        ft = "org",
        config = languages_config.lvim_org_utils,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.lvim_org_utils()
        require("lvim-org-utils").setup()
    end

    #+end_src

*****  COMPLETION

******   [[https://github.com/hrsh7th/nvim-cmp][nvim-cmp]]

        + REQUIRES:
          *  [[https://github.com/hrsh7th/cmp-nvim-lsp][cmp-nvim-lsp]]
          *  [[https://github.com/saadparwaiz1/cmp_luasnip][cmp_luasnip]]
          *  [[https://github.com/hrsh7th/cmp-buffer][cmp-buffer]]
          *  [[https://github.com/hrsh7th/cmp-path][cmp-path]]
          *  [[https://github.com/kdheepak/cmp-latex-symbols][cmp-latex-symbols]]

        + INIT

    #+begin_src lua

    modules["hrsh7th/nvim-cmp"] = {
        requires = {
            {
                "hrsh7th/cmp-nvim-lsp",
            },
            {
                "saadparwaiz1/cmp_luasnip",
                after = "nvim-cmp",
            },
            {
                "hrsh7th/cmp-buffer",
                after = "nvim-cmp",
            },
            {
                "hrsh7th/cmp-path",
                after = "nvim-cmp",
            },
            {
                "kdheepak/cmp-latex-symbols",
                after = "nvim-cmp",
            },
        },
        event = {
            "BufRead",
            "InsertEnter",
        },
        config = completion_config.nvim_cmp,
    }

    #+end_src

        + CONFIG

    #+begin_src lua

    function config.nvim_cmp()
        local cmp_status_ok, cmp = pcall(require, "cmp")
        if not cmp_status_ok then
            return
        end
        local snip_status_ok, luasnip = pcall(require, "luasnip")
        if not snip_status_ok then
            return
        end
        require("luasnip.loaders.from_vscode").lazy_load()
        local check_backspace = function()
            local col = vim.fn.col(".") - 1
            return col == 0 or vim.fn.getline("."):sub(col, col):match("%s")
        end
        local lsp_symbols = {
            Text = "   (Text) ",
            Method = "   (Method)",
            Function = "   (Function)",
            Constructor = "   (Constructor)",
            Field = " ﴲ  (Field)",
            Variable = "[] (Variable)",
            Class = "   (Class)",
            Interface = " ﰮ  (Interface)",
            Module = "   (Module)",
            Property = " 襁 (Property)",
            Unit = "   (Unit)",
            Value = "   (Value)",
            Enum = " 練 (Enum)",
            Keyword = "   (Keyword)",
            Snippet = "   (Snippet)",
            Color = "   (Color)",
            File = "   (File)",
            Reference = "   (Reference)",
            Folder = "   (Folder)",
            EnumMember = "   (EnumMember)",
            Constant = "   (Constant)",
            Struct = "   (Struct)",
            Event = "   (Event)",
            Operator = "   (Operator)",
            TypeParameter = "   (TypeParameter)",
        }
        cmp.setup({
            snippet = {
                expand = function(args)
                    luasnip.lsp_expand(args.body)
                end,
            },
            mapping = {
                ["<C-p>"] = cmp.mapping.select_prev_item(),
                ["<C-n>"] = cmp.mapping.select_next_item(),
                ["<C-d>"] = cmp.mapping.scroll_docs(-4),
                ["<C-f>"] = cmp.mapping.scroll_docs(4),
                ["<C-Space>"] = cmp.mapping.complete(),
                ["<C-e>"] = cmp.mapping.close(),
                ["<CR>"] = cmp.mapping.confirm({
                    behavior = cmp.ConfirmBehavior.Replace,
                    select = true,
                }),
                ["<Tab>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_next_item()
                    elseif luasnip.expandable() then
                        luasnip.expand()
                    elseif luasnip.expand_or_jumpable() then
                        luasnip.expand_or_jump()
                    elseif check_backspace() then
                        fallback()
                    else
                        fallback()
                    end
                end, { "i", "s" }),
                ["<S-Tab>"] = cmp.mapping(function(fallback)
                    if cmp.visible() then
                        cmp.select_prev_item()
                    elseif luasnip.jumpable(-1) then
                        luasnip.jump(-1)
                    else
                        fallback()
                    end
                end, { "i", "s" }),
            },
            formatting = {
                format = function(entry, item)
                    item.kind = lsp_symbols[item.kind]
                    item.menu = ({
                        nvim_lsp = "[LSP]",
                        luasnip = "[Snippet]",
                        buffer = "[Buffer]",
                        path = "[Path]",
                        crates = "[Crates]",
                        latex_symbols = "[LaTex]",
                    })[entry.source.name]
                    return item
                end,
            },
            sources = {
                {
                    name = "nvim_lsp",
                },
                {
                    name = "luasnip",
                },
                {
                    name = "buffer",
                },
                {
                    name = "path",
                },
                {
                    name = "crates",
                },
                {
                    name = "latex_symbols",
                },
                {
                    name = "orgmode",
                },
            },
        })
    end

    #+end_src

******   [[https://github.com/L3MON4D3/LuaSnip][LuaSnip]]

        + REQUIRES:
          *  [[https://github.com/rafamadriz/friendly-snippets][friendly-snippets]]

        + INIT

    #+begin_src lua

    modules["L3MON4D3/LuaSnip"] = {
        requires = {
            {
                "rafamadriz/friendly-snippets",
                after = "LuaSnip",
            },
        },
    }

    #+end_src

******   [[https://github.com/Neevash/awesome-flutter-snippets][awesome-flutter-snippets]]

        + INIT

    #+begin_src lua

    modules["Neevash/awesome-flutter-snippets"] = {
        ft = "dart",
    }

    #+end_src

***  LANGUAGES

****  FILE STRUCTURE

     #+begin_src bash

    languages
    ├── base
    │   ├── init.lua
    │   ├── languages
    │   │   ├── angular.lua
    │   │   ├── clojure.lua
    │   │   ├── cmake.lua
    │   │   ├── _configs_diagnosticls.lua
    │   │   ├── _configs.lua
    │   │   ├── cpp.lua
    │   │   ├── cs.lua
    │   │   ├── css.lua
    │   │   ├── dart.lua
    │   │   ├── _diagnosticls.lua
    │   │   ├── d.lua
    │   │   ├── elixir.lua
    │   │   ├── elm.lua
    │   │   ├── ember.lua
    │   │   ├── _emmet.lua
    │   │   ├── erlang.lua
    │   │   ├── _eslint.lua
    │   │   ├── fortran.lua
    │   │   ├── go.lua
    │   │   ├── graphql.lua
    │   │   ├── groovy.lua
    │   │   ├── html.lua
    │   │   ├── java.lua
    │   │   ├── json.lua
    │   │   ├── jsts.lua
    │   │   ├── julia.lua
    │   │   ├── kotlin.lua
    │   │   ├── latex.lua
    │   │   ├── lua.lua
    │   │   ├── markdown.lua
    │   │   ├── perl.lua
    │   │   ├── php.lua
    │   │   ├── python.lua
    │   │   ├── r.lua
    │   │   ├── ruby.lua
    │   │   ├── rust.lua
    │   │   ├── shell.lua
    │   │   ├── sql.lua
    │   │   ├── _stylelint.lua
    │   │   ├── toml.lua
    │   │   ├── vim.lua
    │   │   ├── vue.lua
    │   │   ├── xml.lua
    │   │   ├── yaml.lua
    │   └── zig.lua
    │   └── utils
    │       ├── diagnostics.lua
    │       ├── init.lua
    │       └── select.lua
    └── user
        └── init.lua

    4 directories, 50 files

     #+end_src



****  LSP SUPPORT OF THE FOLLOWING TYPES 

      + bib
      + c
      + clojure
      + cmake
      + cpp
      + cs
      + css
      + d
      + dart
      + edn
      + eelixir
      + elixir
      + elm
      + erlang
      + fortran
      + go
      + gomod
      + graphql
      + groovy
      + handlebars
      + html
      + java
      + javascript
      + javascript.jsx
      + javascriptreact
      + json
      + julia
      + kotlin
      + less
      + lua
      + markdown
      + mysql
      + objc
      + objcpp
      + perl
      + php
      + postcss
      + python
      + r
      + rmd
      + ruby
      + rust
      + sass
      + scss
      + sh
      + sql
      + sugarss
      + svg
      + tex
      + toml
      + typescript
      + typescript.tsx
      + typescriptreact
      + vb
      + vim
      + vue
      + xml
      + xsd
      + xsl
      + xslt
      + yaml
      + zig
      + zir
