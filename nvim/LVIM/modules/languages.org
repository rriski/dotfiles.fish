*  LANGUAGES

**   [[https://github.com/folke/neoconf.nvim][folke/neoconf.nvim]]

    + INIT

    #+begin_src lua
    modules["folke/neoconf.nvim"] = {
        commit = funcs.get_commit("neoconf.nvim", plugins_snapshot),
    }
    #+end_src

**   [[https://github.com/williamboman/mason.nvim][mason.nvim]]

   + REQUIRES:
       *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

   + INIT

    #+begin_src lua
    modules["williamboman/mason.nvim"] = {
        commit = funcs.get_commit("mason.nvim", plugins_snapshot),
        requires = {
            "neovim/nvim-lspconfig",
            commit = funcs.get_commit("nvim-lspconfig", plugins_snapshot),
        },
        config = languages_config.mason,
    }
   #+end_src

   + CONFIG

    #+begin_src lua
    function config.mason_nvim()
        vim.api.nvim_create_user_command("LspAddToWorkspaceFolder", "lua vim.lsp.buf.add_workspace_folder()", {})
        vim.api.nvim_create_user_command("LspListWorkspaceFolders", "lua vim.lsp.buf.list_workspace_folders()", {})
        vim.api.nvim_create_user_command("LspRemoveWorkspaceFolder", "lua vim.lsp.buf.remove_workspace_folder()", {})
        vim.api.nvim_create_user_command("LspWorkspaceSymbol", "lua vim.lsp.buf.workspace_symbol()", {})
        vim.api.nvim_create_user_command("LspDocumentSymbol", "lua vim.lsp.buf.document_symbol()", {})
        vim.api.nvim_create_user_command("LspCodeAction", "lua vim.lsp.buf.code_action()", {})
        vim.api.nvim_create_user_command("LspCodeLensRefresh", "lua vim.lsp.codelens.refresh()", {})
        vim.api.nvim_create_user_command("LspCodeLensRun", "lua vim.lsp.codelens.run()", {})
        vim.api.nvim_create_user_command("LspDeclaration", "lua vim.lsp.buf.declaration()", {})
        vim.api.nvim_create_user_command("LspDefinition", "lua vim.lsp.buf.definition()", {})
        vim.api.nvim_create_user_command("LspTypeDefinition", "lua vim.lsp.buf.type_definition()", {})
        vim.api.nvim_create_user_command("LspReferences", "lua vim.lsp.buf.references()", {})
        vim.api.nvim_create_user_command("LspClearReferences", "lua vim.lsp.buf.clear_references()", {})
        vim.api.nvim_create_user_command("LspDocumentHighlight", "lua vim.lsp.buf.document_highlight()", {})
        vim.api.nvim_create_user_command("LspImplementation", "lua vim.lsp.buf.implementation()", {})
        vim.api.nvim_create_user_command("LspIncomingCalls", "lua vim.lsp.buf.incoming_calls()", {})
        vim.api.nvim_create_user_command("LspOutgoingCalls", "lua vim.lsp.buf.outgoing_calls()", {})
        vim.api.nvim_create_user_command("LspFormatting", "lua vim.lsp.buf.format {async = true}", {})
        vim.api.nvim_create_user_command("LspRename", "lua vim.lsp.buf.rename()", {})
        vim.api.nvim_create_user_command("LspSignatureHelp", "lua vim.lsp.buf.signature_help()", {})
        vim.api.nvim_create_user_command(
            "LspShowDiagnosticCurrent",
            "lua require('languages.base.utils.show_diagnostic').line()",
            {}
        )
        vim.api.nvim_create_user_command(
            "LspShowDiagnosticNext",
            "lua require('languages.base.utils.show_diagnostic').goto_next()",
            {}
        )
        vim.api.nvim_create_user_command(
            "LspShowDiagnostigPrev",
            "lua require('languages.base.utils.show_diagnostic').goto_prev()",
            {}
        )
        vim.keymap.set("n", "gd", function()
            vim.lsp.buf.definition()
        end, { noremap = true, silent = true, desc = "LspDefinition" })
        vim.keymap.set("n", "gt", function()
            vim.lsp.buf.type_definition()
        end, { noremap = true, silent = true, desc = "LspTypeDefinition" })
        vim.keymap.set("n", "gr", function()
            vim.lsp.buf.references()
        end, { noremap = true, silent = true, desc = "LspReferences" })
        vim.keymap.set("n", "gi", function()
            vim.lsp.buf.implementation()
        end, { noremap = true, silent = true, desc = "LspImplementation" })
        vim.keymap.set("n", "ge", function()
            vim.lsp.buf.rename()
        end, { noremap = true, silent = true, desc = "LspRename" })
        vim.keymap.set("n", "gf", function()
            vim.lsp.buf.format({ async = true })
        end, { noremap = true, silent = true, desc = "LspFormat" })
        vim.keymap.set("n", "ga", function()
            vim.lsp.buf.code_action()
        end, { noremap = true, silent = true, desc = "LspCodeAction" })
        vim.keymap.set("n", "gs", function()
            vim.lsp.buf.signature_help()
        end, { noremap = true, silent = true, desc = "LspSignatureHelp" })
        vim.keymap.set("n", "gL", function()
            vim.lsp.codelens.refresh()
        end, { noremap = true, silent = true, desc = "LspCodeLensRefresh" })
        vim.keymap.set("n", "gl", function()
            vim.lsp.codelens.run()
        end, { noremap = true, silent = true, desc = "LspCodeLensRun" })
        vim.keymap.set("n", "gh", function()
            vim.lsp.buf.hover()
        end, { noremap = true, silent = true, desc = "LspHover" })
        vim.keymap.set("n", "K", function()
            vim.lsp.buf.hover()
        end, { noremap = true, silent = true, desc = "LspHover" })
        vim.keymap.set("n", "dc", function()
            vim.cmd("LspShowDiagnosticCurrent")
        end, { noremap = true, silent = true, desc = "LspShowDiagnosticCurrent" })
        vim.keymap.set("n", "dn", function()
            vim.cmd("LspShowDiagnosticNext")
        end, { noremap = true, silent = true, desc = "LspShowDiagnosticNext" })
        vim.keymap.set("n", "dp", function()
            vim.cmd("LspShowDiagnosticPrev")
        end, { noremap = true, silent = true, desc = "LspShowDiagnosticPrev" })
        local mason_status_ok, mason = pcall(require, "mason")
        if not mason_status_ok then
            return
        end
        mason.setup({
            ui = {
                icons = {
                    package_installed = " ",
                    package_pending = " ",
                    package_uninstalled = " ",
                },
            },
        })
        require("languages.base.utils").setup_diagnostic()
    end
   #+end_src

**   [[https://github.com/jose-elias-alvarez/null-ls.nvim][null-ls.nvim]]

    + INIT

    #+begin_src lua
    modules["jose-elias-alvarez/null-ls.nvim"] = {
        commit = funcs.get_commit("null-ls.nvim", plugins_snapshot),
        config = languages_config.null_ls_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.null_ls_nvim()
        local null_ls_status_ok, null_ls = pcall(require, "null-ls")
        if not null_ls_status_ok then
            return
        end
        null_ls.setup({
            debug = false,
            on_attach = function(client, bufnr)
                if client.server_capabilities.documentFormattingProvider then
                    vim.api.nvim_create_autocmd("BufWritePre", {
                        group = "LvimIDE",
                        buffer = bufnr,
                        command = "lua vim.lsp.buf.format()",
                    })
                end
            end,
        })
    end
    #+end_src

**   [[https://github.com/smjonas/inc-rename.nvim][inc-rename.nvim]]

    + INIT

    #+begin_src lua
    modules["smjonas/inc-rename.nvim"] = {
        commit = funcs.get_commit("inc-rename.nvim", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = languages_config.inc_rename_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.inc_rename_nvim()
        local inc_rename_status_ok, inc_rename = pcall(require, "inc_rename")
        if not inc_rename_status_ok then
            return
        end
        inc_rename.setup()
        vim.keymap.set("n", "gE", function()
            return ":IncRename " .. vim.fn.expand("<cword>")
        end, { expr = true, desc = "IncRename" })
    end
    #+end_src

**   [[https://github.com/DNLHC/glance.nvim][glance.nvim]]

    + INIT

    #+begin_src lua
    modules["DNLHC/glance.nvim"] = {
        commit = funcs.get_commit("glance.nvim", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = languages_config.glance_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    config.glance_nvim = function()
        local glance = require("glance")
        local actions = glance.actions
        glance.setup({
            border = {
                enable = true,
                top_char = " ",
                bottom_char = " ",
            },
            list = {
                width = 0.4,
            },
            theme = {
                enable = false,
            },
            indent_lines = {
                enable = true,
                icon = "▏",
            },
            mappings = {
                list = {
                    ["j"] = actions.next,
                    ["k"] = actions.previous,
                    ["<Tab>"] = actions.next_location,
                    ["<S-Tab>"] = actions.previous_location,
                    ["<C-u>"] = actions.preview_scroll_win(5),
                    ["<C-d>"] = actions.preview_scroll_win(-5),
                    ["v"] = actions.jump_vsplit,
                    ["s"] = actions.jump_split,
                    ["t"] = actions.jump_tab,
                    ["<CR>"] = actions.jump,
                    ["o"] = actions.jump,
                    ["<C-h>"] = actions.enter_win("preview"), -- Focus preview window
                    ["<Esc>"] = actions.close,
                    ["q"] = actions.close,
                },
                preview = {
                    ["q"] = actions.close,
                    ["<Tab>"] = actions.next_location,
                    ["<S-Tab>"] = actions.previous_location,
                    ["<C-l>"] = actions.enter_win("list"), -- Focus list window
                },
            },
            hooks = {
                before_open = function(results, open, jump, _)
                    local uri = vim.uri_from_bufnr(0)
                    if #results == 1 then
                        local target_uri = results[1].uri or results[1].targetUri
                        if target_uri == uri then
                            jump(results[1])
                        else
                            open(results)
                        end
                    else
                        open(results)
                    end
                end,
            },
        })
        vim.keymap.set("n", "gpd", "<Cmd>Glance definitions<CR>")
        vim.keymap.set("n", "gpr", "<Cmd>Glance references<CR>")
        vim.keymap.set("n", "gpt", "<Cmd>Glance type_definitions<CR>")
        vim.keymap.set("n", "gpi", "<Cmd>Glance implementations<CR>")
        vim.keymap.set("n", "fq", "<Cmd>CloseFloatWindows<CR>")
    end
    #+end_src

**   [[https://github.com/folke/neodev.nvim][neodev.nvim]]

    + INIT

    #+begin_src lua
    modules["folke/neodev.nvim"] = {
        commit = funcs.get_commit("neodev.nvim", plugins_snapshot),
        ft = "lua",
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.neodev_nvim()
        local neodev_status_ok, neodev = pcall(require, "neodev")
        if not neodev_status_ok then
            return
        end
        neodev.setup({
            library = {
                enabled = true,
                runtime = true,
                types = true,
                plugins = false,
            },
        })
    end
    #+end_src

**   [[https://github.com/mfussenegger/nvim-jdtls][nvim-jdtls]]

    + INIT

    #+begin_src lua
    modules["mfussenegger/nvim-jdtls"] = {
        commit = funcs.get_commit("nvim-jdtls", plugins_snapshot),
        ft = "java",
    }
    #+end_src

**   [[https://github.com/mfussenegger/nvim-jdtls][nvim-jdtls]]

   + REQUIRES:
       *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["scalameta/nvim-metals"] = {
        commit = funcs.get_commit("nvim-metals", plugins_snapshot),
        requires = { "nvim-lua/plenary.nvim" },
        ft = { "scala", "sbt" },
    }
    #+end_src

**   [[https://github.com/simrat39/rust-tools.nvim][rust-tools.nvim]]

    + REQUIRES:
        *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]
        *  [[https://github.com/nvim-lua/popup.nvim][popup.nvim]]
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]
        *  [[https://github.com/mfussenegger/nvim-dap][nvim-dap]]
        *  [[https://github.com/nvim-telescope/telescope.nvim][telescope.nvim]]

    + INIT

    #+begin_src lua
    modules["simrat39/rust-tools.nvim"] = {
        commit = funcs.get_commit("rust-tools.nvim", plugins_snapshot),
        ft = "rust",
        after = "telescope.nvim",
        requires = {
            {
                "neovim/nvim-lspconfig",
                commit = funcs.get_commit("vim-lspconfig", plugins_snapshot),
            },
            {
                "nvim-lua/popup.nvim",
                commit = funcs.get_commit("popup.nvim", plugins_snapshot),
            },
            {
                "nvim-lua/plenary.nvim",
                commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
            },
            {
                "mfussenegger/nvim-dap",
                commit = funcs.get_commit("nvim-dap", plugins_snapshot),
            },
            {
                "nvim-telescope/telescope.nvim",
                commit = funcs.get_commit("telescope.nvim", plugins_snapshot),
            },
        },
    }
    #+end_src

**   [[https://github.com/ray-x/go.nvim][go.nvim]]

   + REQUIRES:
       *  [[https://github.com/ray-x/guihua.lua][guihua.lua]]

    + INIT

    #+begin_src lua
    modules["ray-x/go.nvim"] = {
        commit = funcs.get_commit("go.nvim", plugins_snapshot),
        requires = {
            "ray-x/guihua.lua",
            commit = funcs.get_commit("guihua.lua", plugins_snapshot),
            run = "cd lua/fzy && make",
        },
        ft = "go",
        config = languages_config.go_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.go_nvim()
        local go_status_ok, go = pcall(require, "go")
        if not go_status_ok then
            return
        end
        go.setup({
            lsp_inlay_hints = {
                enable = false,
            },
        })
    end
    #+end_src

**   [[https://github.com/akinsho/flutter-tools.nvim][flutter-tools.nvim]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["akinsho/flutter-tools.nvim"] = {
        commit = funcs.get_commit("flutter-tools.nvim", plugins_snapshot),
        ft = "dart",
        requires = {
            "nvim-lua/plenary.nvim",
            commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
        },
    }
    #+end_src

**   [[https://github.com/jose-elias-alvarez/nvim-lsp-ts-utils][nvim-lsp-ts-utils]]

    + REQUIRES:
        *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["jose-elias-alvarez/nvim-lsp-ts-utils"] = {
        commit = funcs.get_commit("nvim-lsp-ts-utils", plugins_snapshot),
        ft = { "javascript", "javascriptreact", "typescript", "typescriptreact" },
        requires = {
            {
                "neovim/nvim-lspconfig",
                commit = funcs.get_commit("nvim-lspconfig", plugins_snapshot),
            },
            {
                "nvim-lua/plenary.nvim",
                commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
            },
        },
    }
    #+end_src

**   [[https://github.com/kosayoda/nvim-lightbulb][nvim-lightbulb]]

    + INIT

    #+begin_src lua
    modules["kosayoda/nvim-lightbulb"] = {
        commit = funcs.get_commit("nvim-lightbulb", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = languages_config.nvim_lightbulb,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_lightbulb()
        local nvim_lightbulb_status_ok, nvim_lightbulb = pcall(require, "nvim-lightbulb")
        if not nvim_lightbulb_status_ok then
            return
        end
        nvim_lightbulb.setup({
            sign = {
                enabled = true,
                priority = 10,
            },
            virtual_text = {
                enabled = true,
                text = "",
                hl_mode = "combine",
            },
            autocmd = {
                enabled = true,
            },
        })
        vim.fn.sign_define("LightBulbSign", { text = "", texthl = "LightBulb", linehl = "", numhl = "" })
    end
    #+end_src

**   [[https://github.com/nvim-treesitter/nvim-treesitter][nvim-treesitter]]

    + INIT

    #+begin_src lua
    modules["nvim-treesitter/nvim-treesitter"] = {
        commit = funcs.get_commit("nvim-treesitter", plugins_snapshot),
        requires = {
            {
                "nvim-treesitter/playground",
                commit = funcs.get_commit("playground", plugins_snapshot),
            },
        },
        run = function()
            local ts_update = require("nvim-treesitter.install").update({ with_sync = true })
            ts_update()
        end,
        config = languages_config.nvim_treesitter,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    config.nvim_treesitter = function()
        local nvim_treesitter_configs_status_ok, nvim_treesitter_configs = pcall(require, "nvim-treesitter.configs")
        if not nvim_treesitter_configs_status_ok then
            return
        end
        nvim_treesitter_configs.setup({
            ensure_installed = "all",
            playground = {
                enable = true,
                disable = {},
                updatetime = 25,
                persist_queries = false,
                keybindings = {
                    toggle_query_editor = "o",
                    toggle_hl_groups = "i",
                    toggle_injected_languages = "t",
                    toggle_anonymous_nodes = "a",
                    toggle_language_display = "I",
                    focus_language = "f",
                    unfocus_language = "F",
                    update = "R",
                    goto_node = "<cr>",
                    show_help = "?",
                },
            },
            highlight = {
                enable = true,
                disable = { "markdown" },
                additional_vim_regex_highlighting = { "org" },
            },
            indent = {
                enable = true,
            },
            autopairs = {
                enable = true,
            },
            autotag = {
                enable = true,
            },
            rainbow = {
                enable = true,
            },
            context_commentstring = {
                enable = true,
                config = {
                    javascriptreact = {
                        style_element = "{/*%s*/}",
                    },
                },
            },
        })
        vim.keymap.set("n", "ti", function()
            vim.cmd("TSHighlightCapturesUnderCursor")
        end, { noremap = true, silent = true, desc = "PlaygroundHover" })
    end
    #+end_src

**   [[https://github.com/lvimuser/lsp-inlayhints.nvim][lsp-inlayhints.nvim]]

    + REQUIRES:
        *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

    + INIT

    #+begin_src lua
    modules["lvimuser/lsp-inlayhints.nvim"] = {
        commit = funcs.get_commit("lsp-inlayhints.nvim", plugins_snapshot),
        requires = {
            "neovim/nvim-lspconfig",
            commit = funcs.get_commit("nvim-lspconfig", plugins_snapshot),
        },
        config = languages_config.lsp_inlayhints_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.lsp_inlayhints_nvim()
        local lsp_inlayhints_status_ok, lsp_inlayhints = pcall(require, "lsp-inlayhints")
        if not lsp_inlayhints_status_ok then
            return
        end
        lsp_inlayhints.setup({
            inlay_hints = {
                highlight = "Comment",
            },
        })
    end
    #+end_src

**   [[https://github.com/SmiteshP/nvim-navic][nvim-navic]]

    + REQUIRES:
        *  [[https://github.com/neovim/nvim-lspconfig][nvim-lspconfig]]

    + INIT

    #+begin_src lua
    modules["SmiteshP/nvim-navic"] = {
        commit = funcs.get_commit("nvim-navic", plugins_snapshot),
        requires = {
            "neovim/nvim-lspconfig",
            commit = funcs.get_commit("nvim-lspconfig", plugins_snapshot),
        },
        config = languages_config.nvim_navic,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_navic()
        local icons = require("configs.base.ui.icons")
        local nvim_navic_status_ok, nvim_navic = pcall(require, "nvim-navic")
        if not nvim_navic_status_ok then
            return
        end
        nvim_navic.setup({
            icons = icons.lsp,
            highlight = true,
            separator = " ➤ ",
        })
        vim.g.navic_silence = true
    end
    #+end_src

**   [[https://github.com/pechorin/any-jump.vim][any-jump.vim]]

    + INIT

    #+begin_src lua
    modules["pechorin/any-jump.vim"] = {
        commit = funcs.get_commit("any-jump.vim", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = languages_config.any_jump_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.any_jump_nvim()
        vim.g.any_jump_disable_default_keybindings = 1
        vim.g.any_jump_list_numbers = 1
        vim.keymap.set("n", "<A-u>", ":AnyJump<CR>", { noremap = true, silent = true, desc = "AnyJump" })
        vim.keymap.set("v", "<A-u>", ":AnyJumpVisual<CR>", { noremap = true, silent = true, desc = "AnyJumpVisual" })
    end
    #+end_src


**   [[https://github.com/simrat39/symbols-outline.nvim][symbols-outline.nvim]]

    + INIT

    #+begin_src lua
    modules["simrat39/symbols-outline.nvim"] = {
        commit = funcs.get_commit("symbols-outline.nvim", plugins_snapshot),
        event = {
            "BufRead",
        },
        config = languages_config.symbols_outline_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.symbols_outline_nvim()
        local icons = require("configs.base.ui.icons")
        local symbols_outline_status_ok, symbols_outline = pcall(require, "symbols-outline")
        if not symbols_outline_status_ok then
            return
        end
        symbols_outline.setup({
            symbols = icons.outline,
            highlight_hovered_item = true,
            show_guides = true,
        })
        vim.keymap.set("n", "<A-v>", function()
            vim.cmd("SymbolsOutline")
        end, { noremap = true, silent = true, desc = "SymbolsOutline" })
    end
    #+end_src

**   [[https://github.com/rcarriga/nvim-dap-ui][nvim-dap-ui]]

    + REQUIRES:
        *  [[https://github.com/mfussenegger/nvim-dap][nvim-dap]]
        *  [[https://github.com/jbyuki/one-small-step-for-vimkind][one-small-step-for-vimkind]]

    + INIT

    #+begin_src lua
    modules["rcarriga/nvim-dap-ui"] = {
        commit = funcs.get_commit("nvim-dap-ui", plugins_snapshot),
        event = {
            "BufRead",
        },
        requires = {
            {
                "mfussenegger/nvim-dap",
                commit = funcs.get_commit("nvim-dap", plugins_snapshot),
            },
            {
                "mxsdev/nvim-dap-vscode-js",
                commit = funcs.get_commit("nvim-dap-vscode-js", plugins_snapshot),
                config = languages_config.nvim_dap_vscode_js,
            },
            {
                "jbyuki/one-small-step-for-vimkind",
                commit = funcs.get_commit("one-small-step-for-vimkind", plugins_snapshot),
            },
        },
        config = languages_config.nvim_dap_ui,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.nvim_dap_ui()
        local dapui_status_ok, dapui = pcall(require, "dapui")
        if not dapui_status_ok then
            return
        end
        local dap_status_ok, dap = pcall(require, "dap")
        if not dap_status_ok then
            return
        end
        dapui.setup({
            icons = {
                expanded = "▾",
                collapsed = "▸",
            },
            mappings = {
                expand = {
                    "<CR>",
                    "<2-LeftMouse>",
                },
                open = "o",
                remove = "d",
                edit = "e",
                repl = "r",
            },
            layouts = {
                {
                    elements = {
                        "scopes",
                        "breakpoints",
                        "stacks",
                        "watches",
                    },
                    size = 40,
                    position = "left",
                },
                {
                    elements = {
                        "repl",
                        "console",
                    },
                    size = 10,
                    position = "bottom",
                },
            },
            floating = {
                max_height = nil,
                max_width = nil,
                mappings = {
                    close = {
                        "q",
                        "<Esc>",
                    },
                },
            },
            windows = {
                indent = 1,
            },
        })
        dap.listeners.after.event_initialized["dapui_config"] = function()
            dapui.open({})
        end
        dap.listeners.before.event_terminated["dapui_config"] = function()
            dapui.close({})
        end
        dap.listeners.before.event_exited["dapui_config"] = function()
            dapui.close({})
        end
        vim.fn.sign_define("DapBreakpoint", {
            text = "",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.fn.sign_define("DapStopped", {
            text = "",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.fn.sign_define("DapLogPoint", {
            text = "▶",
            texthl = "",
            linehl = "",
            numhl = "",
        })
        vim.api.nvim_create_user_command("DapToggleBreakpoint", 'lua require("dap").toggle_breakpoint()', {})
        vim.api.nvim_create_user_command("DapStartContinue", 'lua require"dap".continue()', {})
        vim.api.nvim_create_user_command("DapStepInto", 'lua require"dap".step_into()', {})
        vim.api.nvim_create_user_command("DapStepOver", 'lua require"dap".step_over()', {})
        vim.api.nvim_create_user_command("DapStepOut", 'lua require"dap".step_out()', {})
        vim.api.nvim_create_user_command("DapUp", 'lua require"dap".up()', {})
        vim.api.nvim_create_user_command("DapDown", 'lua require"dap".down()', {})
        vim.api.nvim_create_user_command("DapPause", 'lua require"dap".pause()', {})
        vim.api.nvim_create_user_command("DapClose", 'lua require"dap".close()', {})
        vim.api.nvim_create_user_command("DapDisconnect", 'lua require"dap".disconnect()', {})
        vim.api.nvim_create_user_command("DapRestart", 'lua require"dap".restart()', {})
        vim.api.nvim_create_user_command("DapToggleRepl", 'lua require"dap".repl.toggle()', {})
        vim.api.nvim_create_user_command("DapGetSession", 'lua require"dap".session()', {})
        vim.api.nvim_create_user_command(
            "DapUIClose",
            'lua require"dap".close(); require"dap".disconnect(); require"dapui".close()',
            {}
        )
        vim.keymap.set("n", "<A-1>", function()
            dap.toggle_breakpoint()
        end, { noremap = true, silent = true, desc = "DapToggleBreakpoint" })
        vim.keymap.set("n", "<A-2>", function()
            dap.continue()
        end, { noremap = true, silent = true, desc = "DapContinue" })
        vim.keymap.set("n", "<A-3>", function()
            dap.step_into()
        end, { noremap = true, silent = true, desc = "DapStepInto" })
        vim.keymap.set("n", "<A-4>", function()
            dap.step_over()
        end, { noremap = true, silent = true, desc = "DapStepOver" })
        vim.keymap.set("n", "<A-5>", function()
            dap.step_out()
        end, { noremap = true, silent = true, desc = "DapStepOut" })
        vim.keymap.set("n", "<A-6>", function()
            dap.up()
        end, { noremap = true, silent = true, desc = "DapUp" })
        vim.keymap.set("n", "<A-7>", function()
            dap.down()
        end, { noremap = true, silent = true, desc = "DapDown" })
        vim.keymap.set("n", "<A-8>", function()
            dap.close()
            dap.disconnect()
            dapui.close()
        end, { noremap = true, silent = true, desc = "DapUIClose" })
        vim.keymap.set("n", "<A-9>", function()
            dap.restart()
        end, { noremap = true, silent = true, desc = "DapRestart" })
        vim.keymap.set("n", "<A-0>", function()
            dap.repl.toggle()
        end, { noremap = true, silent = true, desc = "DapToggleRepl" })
    end
    #+end_src

    #+begin_src lua
    function config.nvim_dap_vscode_js()
        local global = require("core.global")
        local dap_vscode_js_status_ok, dap_vscode_js = pcall(require, "dap-vscode-js")
        if not dap_vscode_js_status_ok then
            return
        end
        dap_vscode_js.setup({
            node_path = "node", -- Path of node executable. Defaults to $NODE_PATH, and then "node"
            debugger_path = global.mason_path .. "/bin/vscode-js-debug", -- Path to vscode-js-debug installation.
            debugger_cmd = { "js-debug-adapter" }, -- Command to use to launch the debug server. Takes precedence over `node_path` and `debugger_path`.
            adapters = { "pwa-node", "pwa-chrome", "pwa-msedge", "node-terminal", "pwa-extensionHost" }, -- which adapters to register in nvim-dap
        })
    end
    #+end_src

**   [[https://github.com/kristijanhusak/vim-dadbod-ui][vim-dadbod-ui]]

    + REQUIRES:
        *  [[https://github.com/tpope/vim-dadbod][vim-dadbod]]
        *  [[https://github.com/kristijanhusak/vim-dadbod-completion][vim-dadbod-completion]]

    + INIT

    #+begin_src lua
    modules["kristijanhusak/vim-dadbod-ui"] = {
        commit = funcs.get_commit("vim-dadbod-ui", plugins_snapshot),
        requires = {
            {
                "tpope/vim-dadbod",
                commit = funcs.get_commit("vim-dadbod", plugins_snapshot),
                after = "vim-dadbod-ui",
            },
            {
                "kristijanhusak/vim-dadbod-completion",
                commit = funcs.get_commit("vim-dadbod-completion", plugins_snapshot),
                after = "vim-dadbod-ui",
            },
        },
        cmd = {
            "DBUIToggle",
            "DBUIAddConnection",
            "DBUI",
            "DBUIFindBuffer",
            "DBUIRenameBuffer",
        },
        config = languages_config.vim_dadbod_ui,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.vim_dadbod_ui()
        vim.g.db_ui_show_help = 0
        vim.g.db_ui_win_position = "left"
        vim.g.db_ui_use_nerd_fonts = 1
        vim.g.db_ui_winwidth = 35
        vim.g.db_ui_auto_execute_table_helpers = true
    end
    #+end_src

**   [[https://github.com/vuki656/package-info.nvim][package-info.nvim]]

    + REQUIRES:
        *  [[https://github.com/MunifTanjim/nui.nvim][nui.nvim]]

    + INIT

    #+begin_src lua
    modules["vuki656/package-info.nvim"] = {
        commit = funcs.get_commit("package-info.nvim", plugins_snapshot),
        requires = {
            "MunifTanjim/nui.nvim",
            commit = funcs.get_commit("nui.nvim", plugins_snapshot),
        },
        event = "BufRead package.json",
        config = languages_config.package_info,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.package_info_nvim()
        local package_info_status_ok, package_info = pcall(require, "package-info")
        if not package_info_status_ok then
            return
        end
        package_info.setup({
            colors = {
                up_to_date = _G.LVIM_SETTINGS.colorscheme.colors[_G.LVIM_SETTINGS.colorscheme.theme].green_01,
                outdated = _G.LVIM_SETTINGS.colorscheme.colors[_G.LVIM_SETTINGS.colorscheme.theme].red_01,
            },
        })
    end
    #+end_src

**   [[https://github.com/Saecki/crates.nvim][crates.nvim]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["Saecki/crates.nvim"] = {
        commit = funcs.get_commit("crates.nvim", plugins_snapshot),
        requires = {
            "nvim-lua/plenary.nvim",
            commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
        },
        event = "BufRead Cargo.toml",
        config = languages_config.crates_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.crates_nvim()
        local crates_status_ok, crates = pcall(require, "crates")
        if not crates_status_ok then
            return
        end
        crates.setup()
        vim.api.nvim_create_user_command("CratesUpdate", "lua require('crates').update()", {})
        vim.api.nvim_create_user_command("CratesReload", "lua require('crates').reload()", {})
        vim.api.nvim_create_user_command("CratesHide", "lua require('crates').hide()", {})
        vim.api.nvim_create_user_command("CratesToggle", "lua require('crates').toggle()", {})
        vim.api.nvim_create_user_command("CratesUpdateCrate", "lua require('crates').update_crate()", {})
        vim.api.nvim_create_user_command("CratesUpdateCrates", "lua require('crates').update_crates()", {})
        vim.api.nvim_create_user_command("CratesUpdateAllCrates", "lua require('crates').update_all_crates()", {})
        vim.api.nvim_create_user_command("CratesUpgradeCrate", "lua require('crates').upgrade_crate()", {})
        vim.api.nvim_create_user_command("CratesUpgradeCrates", "lua require('crates').upgrade_crates()", {})
        vim.api.nvim_create_user_command("CratesUpgradeAllCrates", "lua require('crates').upgrade_all_crates()", {})
        vim.api.nvim_create_user_command("CratesShowPopup", "lua require('crates').show_popup()", {})
        vim.api.nvim_create_user_command("CratesShowVersionsPopup", "lua require('crates').show_versions_popup()", {})
        vim.api.nvim_create_user_command("CratesShowFeaturesPopup", "lua require('crates').show_features_popup()", {})
        vim.api.nvim_create_user_command("CratesFocusPopup", "lua require('crates').focus_popup()", {})
        vim.api.nvim_create_user_command("CratesHidePopup", "lua require('crates').hide_popup()", {})
    end
    #+end_src

**   [[https://github.com/akinsho/pubspec-assist.nvim][pubspec-assist.nvim]]

    + REQUIRES:
        *  [[https://github.com/nvim-lua/plenary.nvim][plenary.nvim]]

    + INIT

    #+begin_src lua
    modules["akinsho/pubspec-assist.nvim"] = {
        commit = funcs.get_commit("pubspec-assist.nvim", plugins_snapshot),
        requires = {
            "nvim-lua/plenary.nvim",
            commit = funcs.get_commit("plenary.nvim", plugins_snapshot),
        },
        event = "BufRead pubspec.yaml",
        rocks = {
            {
                "lyaml",
                server = "http://rocks.moonscript.org",
            },
        },
        config = languages_config.pubspec_assist_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.pubspec_assist_nvim()
        local pubspec_assist_status_ok, pubspec_assist = pcall(require, "pubspec-assist")
        if not pubspec_assist_status_ok then
            return
        end
        pubspec_assist.setup({})
    end
    #+end_src

**   [[https://github.com/iamcco/markdown-preview.nvim][markdown-preview.nvim]]

    + INIT

    #+begin_src lua
    modules["iamcco/markdown-preview.nvim"] = {
        commit = funcs.get_commit("markdown-preview.nvim", plugins_snapshot),
        run = "cd app && npm install",
        ft = "markdown",
        config = languages_config.markdown_preview_nvim,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.markdown_preview_nvim()
        vim.keymap.set("n", "<S-m>", function()
            vim.cmd("MarkdownPreviewToggle")
        end, { noremap = true, silent = true, desc = "MarkdownPreviewToggle" })
    end
    #+end_src

**   [[https://github.com/lervag/vimtex][vimtex]]

    + INIT

    #+begin_src lua
    modules["lervag/vimtex"] = {
        commit = funcs.get_commit("vimtex", plugins_snapshot),
        config = languages_config.vimtex,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.vimtex()
        vim.g.vimtex_view_method = "zathura"
        vim.g.latex_view_general_viewer = "zathura"
        vim.g.vimtex_compiler_progname = "nvr"
        vim.g.vimtex_compiler_callback_compiling = "nvr"
        vim.g.vimtex_quickfix_open_on_warning = 0
    end
    #+end_src

**   [[https://github.com/dhruvasagar/vim-table-mode][vim-table-mode]]

    + INIT

    #+begin_src lua
    modules["dhruvasagar/vim-table-mode"] = {
        commit = funcs.get_commit("vim-table-mode", plugins_snapshot),
        event = {
            "BufRead",
        },
    }
    #+end_src

**   [[https://github.com/nvim-orgmode/orgmode][orgmode]]

    + INIT

    #+begin_src lua
    modules["nvim-orgmode/orgmode"] = {
        commit = funcs.get_commit("orgmode", plugins_snapshot),
        config = languages_config.orgmode,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.orgmode()
        local orgmode_status_ok, orgmode = pcall(require, "orgmode")
        if not orgmode_status_ok then
            return
        end
        orgmode.setup_ts_grammar()
        orgmode.setup({
            emacs_config = {
                config_path = "$HOME/.emacs.d/early-init.el",
            },
            org_agenda_files = { "$HOME/Org/**/*" },
            org_default_notes_file = "$HOME/Org/refile.org",
        })
    end
    vim.keymap.set("n", "to", function()
        vim.cmd("e ~/Org/notes/notes.org")
    end, { noremap = true, silent = true, desc = "Open org notes" })
    #+end_src

**   [[https://github.com/lvim-tech/lvim-org-utils][lvim-org-utils]]

    + INIT

    #+begin_src lua
    modules["lvim-tech/lvim-org-utils"] = {
        commit = funcs.get_commit("lvim-org-utils", plugins_snapshot),
        ft = "org",
        config = languages_config.lvim_org_utils,
    }
    #+end_src

    + CONFIG

    #+begin_src lua
    function config.lvim_org_utils()
        local lvim_org_utils_status_ok, lvim_org_utils = pcall(require, "lvim-org-utils")
        if not lvim_org_utils_status_ok then
            return
        end
        lvim_org_utils.setup()
    end
    #+end_src
